package tp2;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class tp2Test0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test001"); }


    long long0 = tp2.StubTime.serialVersionUID;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1L);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test002"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test003"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP8 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b9 = server0.addException(iP8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test004"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test005"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    tp2.ITime iTime62 = null;
    server55.setTime(iTime62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server55.removeException(iP68);
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    server70.update();
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b84 = server78.connect(iP83);
    server78.update();
    tp2.Server server86 = new tp2.Server();
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b92 = server86.connect(iP91);
    boolean b93 = server78.addBan(iP91);
    boolean b94 = server70.addBan(iP91);
    boolean b95 = server55.connect(iP91);
    boolean b96 = server0.removeBan(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test006"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    server23.update();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    boolean b38 = server23.addBan(iP36);
    boolean b39 = server15.addBan(iP36);
    boolean b40 = server0.connect(iP36);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    java.lang.String str48 = server41.toString();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    boolean b56 = server41.addException(iP54);
    // The following exception was thrown during execution in test generation
    try {
      boolean b57 = server0.addBan(iP54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test007"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test008"); }


    korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iFinitization1);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test009"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    // The following exception was thrown during execution in test generation
    try {
      boolean b32 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test010"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test011"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test012"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    java.lang.String str78 = server71.toString();
    tp2.Server server79 = new tp2.Server();
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b85 = server79.connect(iP84);
    server79.update();
    tp2.Server server87 = new tp2.Server();
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b93 = server87.connect(iP92);
    boolean b94 = server79.addBan(iP92);
    boolean b95 = server71.addException(iP92);
    boolean b96 = server0.connect(iP92);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str78.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test013"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    server49.update();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b62 = server49.addBan(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    java.lang.String str70 = server63.toString();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addException(iP76);
    tp2.Server server79 = new tp2.Server();
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b86 = server80.connect(iP85);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b92 = server80.addBan(iP91);
    boolean b93 = server79.removeException(iP91);
    boolean b94 = server63.addException(iP91);
    boolean b95 = server49.addBan(iP91);
    tp2.StubTime stubTime96 = new tp2.StubTime();
    server49.setTime((tp2.ITime)stubTime96);
    long long98 = stubTime96.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597302220, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597362220]][IPBan [ip=-1.10.1.1, expires=1465597362222]]}]"+ "'", str48.equals("Server [lastUpdate=1465597302220, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597362220]][IPBan [ip=-1.10.1.1, expires=1465597362222]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long98 == 200000L);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test014"); }


    // The following exception was thrown during execution in test generation
    try {
      korat.finitization.IFinitization iFinitization1 = tp2.Server.finServer(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test015"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    boolean b30 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test016"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server0.removeException(iP19);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test017"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    boolean b81 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597302912, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597362912]]}]"+ "'", str80.equals("Server [lastUpdate=1465597302912, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597362912]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test018"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b62 = server50.addBan(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server50.removeException(iP67);
    boolean b69 = server43.addException(iP67);
    boolean b70 = server0.addBan(iP67);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b76 = server0.connect(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test019"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    java.lang.Integer i55 = null;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i55, (java.lang.Integer)10);
    boolean b58 = server0.addException(iP57);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test020"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    tp2.IP iP16 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = server0.addException(iP16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test021"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    server0.update();
    server0.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b63 = server51.addBan(iP62);
    boolean b64 = server0.removeBan(iP62);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b77 = server65.addBan(iP76);
    tp2.Server server78 = new tp2.Server();
    server78.update();
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b86 = server80.connect(iP85);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b92 = server80.addBan(iP91);
    boolean b93 = server78.addBan(iP91);
    boolean b94 = server65.removeException(iP91);
    boolean b95 = server0.addException(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597304285, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597364285]][IPBan [ip=-1.10.1.1, expires=1465597364287]]}]"+ "'", str48.equals("Server [lastUpdate=1465597304285, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597364285]][IPBan [ip=-1.10.1.1, expires=1465597364287]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test022"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    server27.update();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    boolean b50 = server35.addBan(iP48);
    boolean b51 = server27.addBan(iP48);
    boolean b52 = server0.addException(iP48);
    boolean b53 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test023"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server46.repOK();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server46.addException(iP81);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b91 = server46.addBan(iP90);
    boolean b92 = server0.removeException(iP90);
    tp2.IP iP97 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b98 = server0.removeBan(iP97);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test024"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)(-1));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test025"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b70 = server0.removeException(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test026"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    java.lang.String str71 = server0.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b72 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test027"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b38 = server25.addBan(iP37);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    java.lang.String str46 = server39.toString();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    boolean b54 = server39.addException(iP52);
    tp2.Server server55 = new tp2.Server();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    boolean b69 = server55.removeException(iP67);
    boolean b70 = server39.addException(iP67);
    boolean b71 = server25.addBan(iP67);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server25.connect(iP76);
    java.lang.Integer i80 = null;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i80, (java.lang.Integer)10);
    boolean b83 = server25.addException(iP82);
    boolean b84 = server0.addException(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test028"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    java.lang.String str9 = server2.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    boolean b17 = server2.addException(iP15);
    tp2.Server server18 = new tp2.Server();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server18.removeException(iP30);
    boolean b33 = server2.addException(iP30);
    boolean b34 = server0.connect(iP30);
    boolean b35 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test029"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    boolean b69 = server0.repOK();
    boolean b70 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test030"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    server0.update();
    boolean b48 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test031"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    boolean b89 = server0.repOK();
    java.lang.Integer i92 = null;
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i92, (java.lang.Integer)10);
    boolean b95 = server0.removeException(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597305574, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597365574]]}]"+ "'", str80.equals("Server [lastUpdate=1465597305574, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597365574]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597305574, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597365574]]}]"+ "'", str81.equals("Server [lastUpdate=1465597305574, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597365574]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test032"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b14 = server2.addBan(iP13);
    boolean b15 = server2.repOK();
    server2.update();
    tp2.Server server17 = new tp2.Server();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b30 = server18.addBan(iP29);
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.ITime iTime38 = null;
    server31.setTime(iTime38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server31.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    server46.update();
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server54.connect(iP59);
    server54.update();
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server62.connect(iP67);
    boolean b69 = server54.addBan(iP67);
    boolean b70 = server46.addBan(iP67);
    boolean b71 = server31.connect(iP67);
    boolean b72 = server18.removeBan(iP67);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b78 = server18.removeBan(iP77);
    boolean b79 = server17.addException(iP77);
    boolean b80 = server2.connect(iP77);
    boolean b81 = server0.addBan(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test033"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    boolean b25 = server0.repOK();
    tp2.IP iP26 = null;
    boolean b27 = server0.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    java.lang.String str35 = server28.toString();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    boolean b43 = server28.addException(iP41);
    tp2.Server server44 = new tp2.Server();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server44.removeException(iP56);
    boolean b59 = server28.addException(iP56);
    // The following exception was thrown during execution in test generation
    try {
      boolean b60 = server0.addException(iP56);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test034"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b20 = server0.removeException(iP19);
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test035"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    tp2.IP iP65 = null;
    boolean b66 = server0.addBan(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    // The following exception was thrown during execution in test generation
    try {
      boolean b72 = server0.addException(iP71);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test036"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    server0.update();
    boolean b53 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test037"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    java.lang.String str14 = server7.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server7.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    server32.update();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addBan(iP45);
    server32.update();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    server49.update();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addBan(iP70);
    boolean b73 = server49.addBan(iP70);
    boolean b74 = server32.connect(iP70);
    boolean b75 = server7.removeBan(iP70);
    java.lang.String str76 = server7.toString();
    java.lang.String str77 = server7.toString();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b83 = server7.removeBan(iP82);
    boolean b84 = server0.addBan(iP82);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str76.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str77.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test038"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    boolean b69 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test039"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    boolean b46 = server0.repOK();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    server47.update();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b67 = server55.addBan(iP66);
    boolean b68 = server55.repOK();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    server69.update();
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    server77.update();
    tp2.Server server85 = new tp2.Server();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b91 = server85.connect(iP90);
    boolean b92 = server77.addBan(iP90);
    boolean b93 = server69.addBan(iP90);
    boolean b94 = server55.addException(iP90);
    boolean b95 = server47.removeBan(iP90);
    boolean b96 = server0.connect(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test040"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.ITime iTime16 = null;
    server9.setTime(iTime16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server9.removeException(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server9.removeException(iP28);
    // The following exception was thrown during execution in test generation
    try {
      boolean b30 = server0.addBan(iP28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test041"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    server0.update();
    tp2.IP iP86 = null;
    boolean b87 = server0.removeException(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597306870, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597306870, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test042"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    java.lang.String str71 = server0.toString();
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test043"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server0.connect(iP83);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b93 = server0.removeException(iP92);
    tp2.IP iP98 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b99 = server0.connect(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test044"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597307120, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597307120, exceptions=(), bans={}]"));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test045"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b21 = server9.addBan(iP20);
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    tp2.ITime iTime29 = null;
    server22.setTime(iTime29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server22.removeException(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addBan(iP58);
    boolean b61 = server37.addBan(iP58);
    boolean b62 = server22.connect(iP58);
    boolean b63 = server9.removeBan(iP58);
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    java.lang.String str71 = server64.toString();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    boolean b79 = server64.addException(iP77);
    tp2.Server server80 = new tp2.Server();
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b87 = server81.connect(iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b93 = server81.addBan(iP92);
    boolean b94 = server80.removeException(iP92);
    boolean b95 = server64.addException(iP92);
    boolean b96 = server9.connect(iP92);
    boolean b97 = server0.connect(iP92);
    boolean b98 = server0.repOK();
    boolean b99 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597307529, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597307529, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test046"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b75 = server15.removeBan(iP74);
    boolean b76 = server0.addException(iP74);
    java.lang.String str77 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=0, exceptions=([100.-1.-1.0]), bans={}]"+ "'", str77.equals("Server [lastUpdate=0, exceptions=([100.-1.-1.0]), bans={}]"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test047"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    boolean b70 = server0.repOK();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b76 = server0.addException(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test048"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server0.removeBan(iP87);
    java.lang.String str89 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597307701, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367701]]}]"+ "'", str80.equals("Server [lastUpdate=1465597307701, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367701]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597307701, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367701]]}]"+ "'", str81.equals("Server [lastUpdate=1465597307701, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367701]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367701]]}]"+ "'", str89.equals("Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367701]]}]"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test049"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    java.lang.Integer i67 = null;
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), i67, (java.lang.Integer)1);
    boolean b70 = server0.addException(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test050"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    boolean b36 = server0.removeException(iP33);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597307915, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597307915, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test051"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server0.removeBan(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b94 = server0.connect(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597307970, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367970]]}]"+ "'", str80.equals("Server [lastUpdate=1465597307970, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367970]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597307970, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367970]]}]"+ "'", str81.equals("Server [lastUpdate=1465597307970, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597367970]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test052"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    java.lang.String str32 = server0.toString();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    boolean b46 = server33.repOK();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    server47.update();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addBan(iP68);
    boolean b71 = server47.addBan(iP68);
    boolean b72 = server33.addException(iP68);
    boolean b73 = server0.removeBan(iP68);
    // The following exception was thrown during execution in test generation
    try {
      boolean b74 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test053"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    java.lang.Integer i28 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i28, (java.lang.Integer)10);
    boolean b31 = server7.removeException(iP30);
    boolean b32 = server0.removeException(iP30);
    java.lang.String str33 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test054"); }


    java.lang.Integer i1 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), i1, (java.lang.Integer)0, (java.lang.Integer)(-1));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test055"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    boolean b46 = server0.removeBan(iP44);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    java.lang.String str54 = server47.toString();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addBan(iP68);
    boolean b71 = server47.addException(iP68);
    boolean b72 = server47.repOK();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b78 = server47.connect(iP77);
    boolean b79 = server0.addException(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test056"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b89 = server0.addException(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test057"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    tp2.ITime iTime21 = null;
    server14.setTime(iTime21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server14.removeException(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    server29.update();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    boolean b52 = server37.addBan(iP50);
    boolean b53 = server29.addBan(iP50);
    boolean b54 = server14.connect(iP50);
    boolean b55 = server1.removeBan(iP50);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b61 = server1.removeBan(iP60);
    boolean b62 = server0.addException(iP60);
    tp2.Server server63 = new tp2.Server();
    server63.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    java.lang.String str72 = server65.toString();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    boolean b80 = server65.addException(iP78);
    tp2.Server server81 = new tp2.Server();
    tp2.Server server82 = new tp2.Server();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b88 = server82.connect(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b94 = server82.addBan(iP93);
    boolean b95 = server81.removeException(iP93);
    boolean b96 = server65.addException(iP93);
    boolean b97 = server63.connect(iP93);
    boolean b98 = server0.removeException(iP93);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str72.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test058"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b46 = server33.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    java.lang.String str54 = server47.toString();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    boolean b62 = server47.addException(iP60);
    tp2.Server server63 = new tp2.Server();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server63.removeException(iP75);
    boolean b78 = server47.addException(iP75);
    boolean b79 = server33.addBan(iP75);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b85 = server33.connect(iP84);
    java.lang.Integer i88 = null;
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i88, (java.lang.Integer)10);
    boolean b91 = server33.addException(iP90);
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b97 = server33.connect(iP96);
    boolean b98 = server0.addException(iP96);
    boolean b99 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test059"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b78 = server0.removeException(iP77);
    java.lang.String str79 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str79.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test060"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test061"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    java.lang.String str9 = server2.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    boolean b17 = server2.addException(iP15);
    tp2.Server server18 = new tp2.Server();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server18.removeException(iP30);
    boolean b33 = server2.addException(iP30);
    boolean b34 = server0.connect(iP30);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b40 = server0.connect(iP39);
    tp2.Server server41 = new tp2.Server();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b54 = server42.addBan(iP53);
    boolean b55 = server41.removeException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    boolean b69 = server56.repOK();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    server70.update();
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b84 = server78.connect(iP83);
    server78.update();
    tp2.Server server86 = new tp2.Server();
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b92 = server86.connect(iP91);
    boolean b93 = server78.addBan(iP91);
    boolean b94 = server70.addBan(iP91);
    boolean b95 = server56.addException(iP91);
    boolean b96 = server41.addBan(iP91);
    boolean b97 = server0.removeException(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test062"); }


    java.lang.Integer i3 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)10, i3);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test063"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b61 = server48.addBan(iP60);
    boolean b62 = server0.removeException(iP60);
    boolean b63 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test064"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.addException(iP81);
    server0.update();
    java.lang.String str89 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Server [lastUpdate=1465597309149, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str89.equals("Server [lastUpdate=1465597309149, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test065"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b20 = server8.addBan(iP19);
    boolean b21 = server8.repOK();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    server30.update();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addBan(iP43);
    boolean b46 = server22.addBan(iP43);
    boolean b47 = server8.addException(iP43);
    boolean b48 = server0.removeBan(iP43);
    java.lang.String str49 = server0.toString();
    server0.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b56 = server0.addBan(iP55);
    boolean b57 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597309186, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=1465597309186, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test066"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b89 = server77.addBan(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b95 = server77.removeException(iP94);
    boolean b96 = server0.addException(iP94);
    java.lang.String str97 = server0.toString();
    boolean b98 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str97.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test067"); }


    java.lang.Integer i2 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, i2, (java.lang.Integer)10);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test068"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)100);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test069"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.IP iP27 = null;
    boolean b28 = server0.removeBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b58 = server45.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    java.lang.String str66 = server59.toString();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    boolean b74 = server59.addException(iP72);
    tp2.Server server75 = new tp2.Server();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b88 = server76.addBan(iP87);
    boolean b89 = server75.removeException(iP87);
    boolean b90 = server59.addException(iP87);
    boolean b91 = server45.addBan(iP87);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server45.setTime((tp2.ITime)stubTime92);
    long long94 = stubTime92.getCurrentTime();
    long long95 = stubTime92.getCurrentTime();
    long long96 = stubTime92.getCurrentTime();
    server29.setTime((tp2.ITime)stubTime92);
    server0.setTime((tp2.ITime)stubTime92);
    long long99 = stubTime92.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long99 == 200000L);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test070"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    boolean b59 = server44.addBan(iP57);
    boolean b60 = server36.addBan(iP57);
    boolean b61 = server9.addException(iP57);
    boolean b62 = server0.connect(iP57);
    tp2.IP iP63 = null;
    boolean b64 = server0.removeBan(iP63);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.ITime iTime72 = null;
    server65.setTime(iTime72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server65.removeException(iP78);
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b86 = server80.connect(iP85);
    server80.update();
    tp2.Server server88 = new tp2.Server();
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b94 = server88.connect(iP93);
    boolean b95 = server80.addBan(iP93);
    boolean b96 = server65.addException(iP93);
    boolean b97 = server0.addException(iP93);
    boolean b98 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test071"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b20 = server8.addBan(iP19);
    boolean b21 = server8.repOK();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    server30.update();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addBan(iP43);
    boolean b46 = server22.addBan(iP43);
    boolean b47 = server8.addException(iP43);
    boolean b48 = server0.removeBan(iP43);
    java.lang.String str49 = server0.toString();
    server0.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b56 = server0.addBan(iP55);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.ITime iTime64 = null;
    server57.setTime(iTime64);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server57.removeException(iP70);
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    server72.update();
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b86 = server80.connect(iP85);
    server80.update();
    tp2.Server server88 = new tp2.Server();
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b94 = server88.connect(iP93);
    boolean b95 = server80.addBan(iP93);
    boolean b96 = server72.addBan(iP93);
    boolean b97 = server57.connect(iP93);
    boolean b98 = server0.removeBan(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597309448, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=1465597309448, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test072"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b35 = server0.removeBan(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test073"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test074"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test075"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b6 = server0.removeException(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    server7.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server7.addBan(iP19);
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    java.lang.String str28 = server21.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    boolean b36 = server21.addException(iP34);
    tp2.Server server37 = new tp2.Server();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b50 = server38.addBan(iP49);
    boolean b51 = server37.removeException(iP49);
    boolean b52 = server21.addException(iP49);
    boolean b53 = server7.addBan(iP49);
    boolean b54 = server7.repOK();
    java.lang.String str55 = server7.toString();
    server7.update();
    server7.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b70 = server58.addBan(iP69);
    boolean b71 = server7.removeBan(iP69);
    boolean b72 = server0.removeBan(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=1465597309877, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597369877]][IPBan [ip=-1.10.1.1, expires=1465597369879]]}]"+ "'", str55.equals("Server [lastUpdate=1465597309877, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597369877]][IPBan [ip=-1.10.1.1, expires=1465597369879]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test076"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b35 = server0.removeBan(iP34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test077"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b89 = server77.addBan(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b95 = server77.removeException(iP94);
    boolean b96 = server0.addException(iP94);
    java.lang.String str97 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str97.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test078"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b26 = server20.connect(iP25);
    tp2.ITime iTime27 = null;
    server20.setTime(iTime27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server20.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server35.addBan(iP56);
    boolean b60 = server20.connect(iP56);
    boolean b61 = server7.removeBan(iP56);
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b67 = server7.removeBan(iP66);
    java.lang.Integer i70 = null;
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, i70, (java.lang.Integer)(-1));
    boolean b73 = server7.addBan(iP72);
    boolean b74 = server0.addBan(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test079"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    server34.update();
    server34.update();
    tp2.Server server52 = new tp2.Server();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b65 = server53.addBan(iP64);
    boolean b66 = server52.removeException(iP64);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    tp2.ITime iTime74 = null;
    server67.setTime(iTime74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b81 = server67.removeException(iP80);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b87 = server67.removeException(iP86);
    boolean b88 = server52.addException(iP86);
    boolean b89 = server34.removeBan(iP86);
    boolean b90 = server0.connect(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test080"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)100);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test081"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b78 = server0.removeException(iP77);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test082"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    server0.update();
    java.lang.String str53 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=1465597310389, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597370388]]}]"+ "'", str53.equals("Server [lastUpdate=1465597310389, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597370388]]}]"));

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test083"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b14 = server0.removeBan(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test084"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b14 = server2.addBan(iP13);
    boolean b15 = server0.addBan(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    server24.update();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    boolean b39 = server24.addBan(iP37);
    boolean b40 = server16.addBan(iP37);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server41.addBan(iP52);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server54.connect(iP59);
    tp2.ITime iTime61 = null;
    server54.setTime(iTime61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server54.removeException(iP67);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    server69.update();
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    server77.update();
    tp2.Server server85 = new tp2.Server();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b91 = server85.connect(iP90);
    boolean b92 = server77.addBan(iP90);
    boolean b93 = server69.addBan(iP90);
    boolean b94 = server54.connect(iP90);
    boolean b95 = server41.removeBan(iP90);
    boolean b96 = server16.addBan(iP90);
    boolean b97 = server0.removeException(iP90);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test085"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b33 = server0.addBan(iP32);
    java.lang.String str34 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test086"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    java.lang.Integer i28 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i28, (java.lang.Integer)10);
    boolean b31 = server7.removeException(iP30);
    boolean b32 = server0.removeException(iP30);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test087"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    java.lang.String str49 = server0.toString();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    java.lang.String str58 = server50.toString();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server66.addBan(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server66.removeException(iP83);
    boolean b85 = server59.addException(iP83);
    boolean b86 = server50.removeException(iP83);
    boolean b87 = server0.addException(iP83);
    tp2.IP iP88 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b89 = server0.addException(iP88);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597310539, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370540]][IPBan [ip=-1.10.1.1, expires=1465597370541]]}]"+ "'", str48.equals("Server [lastUpdate=1465597310539, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370540]][IPBan [ip=-1.10.1.1, expires=1465597370541]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597310539, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370540]][IPBan [ip=-1.10.1.1, expires=1465597370541]]}]"+ "'", str49.equals("Server [lastUpdate=1465597310539, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370540]][IPBan [ip=-1.10.1.1, expires=1465597370541]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=1465597310542, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=1465597310542, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test088"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    java.lang.String str14 = server7.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server7.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    server32.update();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addBan(iP45);
    server32.update();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    server49.update();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addBan(iP70);
    boolean b73 = server49.addBan(iP70);
    boolean b74 = server32.connect(iP70);
    boolean b75 = server7.removeBan(iP70);
    java.lang.String str76 = server7.toString();
    java.lang.String str77 = server7.toString();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b83 = server7.removeBan(iP82);
    boolean b84 = server0.addBan(iP82);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b90 = server0.addBan(iP89);
    server0.update();
    java.lang.String str92 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str76.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str77.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "Server [lastUpdate=1465597310549, exceptions=(), bans={[IPBan [ip=10.10.1.-1, expires=1465597370549]]}]"+ "'", str92.equals("Server [lastUpdate=1465597310549, exceptions=(), bans={[IPBan [ip=10.10.1.-1, expires=1465597370549]]}]"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test089"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test090"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    server0.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    boolean b24 = server16.repOK();
    tp2.Server server25 = new tp2.Server();
    server25.update();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server16.addException(iP38);
    boolean b42 = server0.addBan(iP38);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b48 = server0.removeBan(iP47);
    boolean b49 = server0.repOK();
    boolean b50 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test091"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server0.removeBan(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b94 = server0.addException(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597310714, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370716]]}]"+ "'", str80.equals("Server [lastUpdate=1465597310714, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370716]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597310714, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370716]]}]"+ "'", str81.equals("Server [lastUpdate=1465597310714, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370716]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test092"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    boolean b29 = server0.removeBan(iP27);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b35 = server0.connect(iP34);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    tp2.ITime iTime43 = null;
    server36.setTime(iTime43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server36.removeException(iP49);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b56 = server36.removeException(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b62 = server36.connect(iP61);
    boolean b63 = server0.removeBan(iP61);
    java.lang.String str64 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597310754, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370754]]}]"+ "'", str14.equals("Server [lastUpdate=1465597310754, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597370754]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=1465597310754, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=1465597310754, exceptions=(), bans={}]"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test093"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    boolean b31 = server16.addBan(iP29);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    server32.update();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addBan(iP53);
    boolean b56 = server32.addBan(iP53);
    server32.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    server58.update();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    server66.update();
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server74.connect(iP79);
    boolean b81 = server66.addBan(iP79);
    boolean b82 = server58.addBan(iP79);
    boolean b83 = server32.addBan(iP79);
    boolean b84 = server16.removeBan(iP79);
    boolean b85 = server0.addException(iP79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test094"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b51 = server33.removeException(iP50);
    boolean b52 = server26.addException(iP50);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b65 = server53.addBan(iP64);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b71 = server53.removeException(iP70);
    boolean b72 = server26.removeBan(iP70);
    boolean b73 = server0.removeBan(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test095"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b20 = server0.removeException(iP19);
    tp2.IP iP21 = null;
    boolean b22 = server0.connect(iP21);
    // The following exception was thrown during execution in test generation
    try {
      boolean b23 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test096"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b60 = server0.removeBan(iP59);
    java.lang.Integer i63 = null;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, i63, (java.lang.Integer)(-1));
    boolean b66 = server0.addBan(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)(-1));
    boolean b72 = server0.connect(iP71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test097"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    long long69 = stubTime63.getCurrentTime();
    long long70 = stubTime63.getCurrentTime();
    long long71 = stubTime63.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long70 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 200000L);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test098"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)10);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test099"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test100"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    server0.update();
    boolean b11 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test101"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b22 = server0.addException(iP21);
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    java.lang.String str30 = server23.toString();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    server31.update();
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    boolean b46 = server31.addBan(iP44);
    boolean b47 = server23.addException(iP44);
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addBan(iP61);
    server48.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    server65.update();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    server73.update();
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b87 = server81.connect(iP86);
    boolean b88 = server73.addBan(iP86);
    boolean b89 = server65.addBan(iP86);
    boolean b90 = server48.connect(iP86);
    boolean b91 = server23.removeBan(iP86);
    tp2.ITime iTime92 = null;
    server23.setTime(iTime92);
    tp2.StubTime stubTime94 = new tp2.StubTime();
    server23.setTime((tp2.ITime)stubTime94);
    long long96 = stubTime94.getCurrentTime();
    long long97 = stubTime94.getCurrentTime();
    long long98 = stubTime94.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long97 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long98 == 200000L);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test102"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.Server server13 = new tp2.Server();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b26 = server14.addBan(iP25);
    boolean b27 = server13.removeException(iP25);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b81 = server69.addBan(iP80);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b87 = server69.removeException(iP86);
    boolean b88 = server28.connect(iP86);
    boolean b89 = server13.removeBan(iP86);
    boolean b90 = server0.removeException(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597311357, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597311357, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597311357, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597311357, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597311357, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597311357, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test103"); }


    tp2.Server server0 = new tp2.Server();
    boolean b1 = server0.repOK();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b7 = server0.addBan(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test104"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    server9.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b22 = server9.addBan(iP21);
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    java.lang.String str30 = server23.toString();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    boolean b38 = server23.addException(iP36);
    tp2.Server server39 = new tp2.Server();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b52 = server40.addBan(iP51);
    boolean b53 = server39.removeException(iP51);
    boolean b54 = server23.addException(iP51);
    boolean b55 = server9.addBan(iP51);
    boolean b56 = server9.repOK();
    java.lang.String str57 = server9.toString();
    boolean b58 = server9.repOK();
    tp2.IP iP59 = null;
    boolean b60 = server9.removeBan(iP59);
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b66 = server9.removeBan(iP65);
    boolean b67 = server0.removeException(iP65);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=1465597311399, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371399]][IPBan [ip=-1.10.1.1, expires=1465597371401]]}]"+ "'", str57.equals("Server [lastUpdate=1465597311399, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371399]][IPBan [ip=-1.10.1.1, expires=1465597371401]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test105"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b7 = server0.removeException(iP6);
    boolean b8 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test106"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b26 = server14.addBan(iP25);
    boolean b27 = server13.removeException(iP25);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b40 = server28.addBan(iP39);
    boolean b41 = server28.repOK();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server28.addException(iP63);
    boolean b68 = server13.addBan(iP63);
    boolean b69 = server0.addException(iP63);
    boolean b70 = server0.repOK();
    java.lang.Integer i72 = null;
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)0, i72, (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b76 = server0.addBan(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test107"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server0.removeBan(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b94 = server0.addException(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597311578, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371578]]}]"+ "'", str80.equals("Server [lastUpdate=1465597311578, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371578]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597311578, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371578]]}]"+ "'", str81.equals("Server [lastUpdate=1465597311578, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371578]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test108"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test109"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    tp2.ITime iTime84 = null;
    server77.setTime(iTime84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b91 = server77.removeException(iP90);
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b97 = server77.removeException(iP96);
    boolean b98 = server0.addBan(iP96);
    java.lang.String str99 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371695]]}]"+ "'", str99.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597371695]]}]"));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test110"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b20 = server8.addBan(iP19);
    boolean b21 = server8.repOK();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    server30.update();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addBan(iP43);
    boolean b46 = server22.addBan(iP43);
    boolean b47 = server8.addException(iP43);
    boolean b48 = server0.removeBan(iP43);
    java.lang.String str49 = server0.toString();
    java.lang.String str50 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597311788, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=1465597311788, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465597311788, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465597311788, exceptions=(), bans={}]"));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test111"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    java.lang.String str10 = server0.toString();
    boolean b11 = server0.repOK();
    java.lang.String str12 = server0.toString();
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    server13.update();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b26 = server13.addBan(iP25);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    java.lang.String str34 = server27.toString();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    boolean b42 = server27.addException(iP40);
    tp2.Server server43 = new tp2.Server();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b56 = server44.addBan(iP55);
    boolean b57 = server43.removeException(iP55);
    boolean b58 = server27.addException(iP55);
    boolean b59 = server13.addBan(iP55);
    boolean b60 = server13.repOK();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    server61.update();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b74 = server61.addBan(iP73);
    boolean b75 = server13.removeException(iP73);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b81 = server13.addException(iP80);
    boolean b82 = server0.connect(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597311833, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597311833, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465597311833, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465597311833, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597311833, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597311833, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597311833, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597311833, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test112"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    server23.update();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    boolean b38 = server23.addBan(iP36);
    boolean b39 = server15.addBan(iP36);
    boolean b40 = server0.connect(iP36);
    // The following exception was thrown during execution in test generation
    try {
      boolean b41 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test113"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    boolean b17 = server0.repOK();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    tp2.ITime iTime25 = null;
    server18.setTime(iTime25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server18.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    server41.update();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    boolean b56 = server41.addBan(iP54);
    boolean b57 = server33.addBan(iP54);
    boolean b58 = server18.connect(iP54);
    boolean b59 = server0.removeBan(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test114"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b41 = server28.addBan(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    java.lang.String str49 = server42.toString();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    boolean b57 = server42.addException(iP55);
    tp2.Server server58 = new tp2.Server();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b71 = server59.addBan(iP70);
    boolean b72 = server58.removeException(iP70);
    boolean b73 = server42.addException(iP70);
    boolean b74 = server28.addBan(iP70);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server28.connect(iP79);
    java.lang.Integer i83 = null;
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i83, (java.lang.Integer)10);
    boolean b86 = server28.addException(iP85);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b92 = server28.connect(iP91);
    boolean b93 = server0.removeBan(iP91);
    server0.update();
    java.lang.String str95 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Server [lastUpdate=1465597312094, exceptions=([-1.10.1.1]), bans={}]"+ "'", str95.equals("Server [lastUpdate=1465597312094, exceptions=([-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test115"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    boolean b59 = server44.addBan(iP57);
    boolean b60 = server36.addBan(iP57);
    boolean b61 = server9.addException(iP57);
    boolean b62 = server0.connect(iP57);
    java.lang.String str63 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=1465597312142, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=1465597312142, exceptions=(), bans={}]"));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test116"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    boolean b25 = server0.repOK();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b31 = server0.connect(iP30);
    java.lang.String str32 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test117"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server46.repOK();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server46.addException(iP81);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b91 = server46.addBan(iP90);
    boolean b92 = server0.removeException(iP90);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test118"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    server0.update();
    java.lang.Integer i56 = null;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, i56);
    boolean b58 = server0.connect(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test119"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    java.lang.String str10 = server2.toString();
    tp2.IP iP11 = null;
    boolean b12 = server2.removeException(iP11);
    java.lang.String str13 = server2.toString();
    java.lang.String str14 = server2.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    java.lang.String str71 = server64.toString();
    boolean b72 = server64.repOK();
    tp2.Server server73 = new tp2.Server();
    server73.update();
    tp2.Server server75 = new tp2.Server();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b81 = server75.connect(iP80);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b87 = server75.addBan(iP86);
    boolean b88 = server73.addBan(iP86);
    boolean b89 = server64.addException(iP86);
    boolean b90 = server15.connect(iP86);
    java.lang.String str91 = server15.toString();
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10);
    boolean b97 = server15.connect(iP96);
    boolean b98 = server2.addException(iP96);
    boolean b99 = server0.removeException(iP96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597312257, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597312257, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465597312257, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465597312257, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597312257, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465597312257, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Server [lastUpdate=1465597312257, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372258]][IPBan [ip=-1.10.1.1, expires=1465597372259]]}]"+ "'", str91.equals("Server [lastUpdate=1465597312257, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372258]][IPBan [ip=-1.10.1.1, expires=1465597372259]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test120"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test121"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    java.lang.String str10 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597312448, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597312448, exceptions=(), bans={}]"));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test122"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b77 = server65.addBan(iP76);
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b83 = server65.removeException(iP82);
    java.lang.Integer i86 = null;
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i86, (java.lang.Integer)10);
    boolean b89 = server65.removeException(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b95 = server65.removeException(iP94);
    boolean b96 = server0.connect(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test123"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    java.lang.String str89 = server0.toString();
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b95 = server0.addBan(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597312563, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372563]]}]"+ "'", str80.equals("Server [lastUpdate=1465597312563, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372563]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597312563, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372563]]}]"+ "'", str81.equals("Server [lastUpdate=1465597312563, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372563]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372563]]}]"+ "'", str89.equals("Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372563]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test124"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597312610, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372610]]}]"+ "'", str14.equals("Server [lastUpdate=1465597312610, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372610]]}]"));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test125"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    java.lang.String str32 = server0.toString();
    tp2.Server server33 = new tp2.Server();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    boolean b47 = server33.removeException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b61 = server48.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server62.connect(iP67);
    java.lang.String str69 = server62.toString();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    boolean b77 = server62.addException(iP75);
    tp2.Server server78 = new tp2.Server();
    tp2.Server server79 = new tp2.Server();
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b85 = server79.connect(iP84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b91 = server79.addBan(iP90);
    boolean b92 = server78.removeException(iP90);
    boolean b93 = server62.addException(iP90);
    boolean b94 = server48.addBan(iP90);
    tp2.StubTime stubTime95 = new tp2.StubTime();
    server48.setTime((tp2.ITime)stubTime95);
    server33.setTime((tp2.ITime)stubTime95);
    long long98 = stubTime95.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long98 == 200000L);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test126"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    boolean b29 = server0.removeBan(iP27);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b35 = server0.connect(iP34);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b49 = server36.addBan(iP48);
    boolean b50 = server0.addException(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597312727, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372727]]}]"+ "'", str14.equals("Server [lastUpdate=1465597312727, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372727]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test127"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    boolean b63 = server16.repOK();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    server64.update();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b77 = server64.addBan(iP76);
    boolean b78 = server16.removeException(iP76);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b84 = server16.addException(iP83);
    boolean b85 = server0.addException(iP83);
    boolean b86 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test128"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b82 = server0.addException(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test129"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b18 = server0.removeException(iP17);
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    server32.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    boolean b47 = server32.addBan(iP45);
    boolean b48 = server19.removeException(iP45);
    boolean b49 = server0.connect(iP45);
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    tp2.ITime iTime57 = null;
    server50.setTime(iTime57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server50.removeException(iP63);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b70 = server50.removeException(iP69);
    boolean b71 = server0.removeException(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test130"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    server23.update();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    boolean b38 = server23.addBan(iP36);
    boolean b39 = server15.addBan(iP36);
    boolean b40 = server0.connect(iP36);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    server41.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b54 = server41.addBan(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server41.addBan(iP83);
    tp2.StubTime stubTime88 = new tp2.StubTime();
    server41.setTime((tp2.ITime)stubTime88);
    server0.setTime((tp2.ITime)stubTime88);
    java.lang.String str91 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str91.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test131"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b75 = server15.removeBan(iP74);
    boolean b76 = server0.addException(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b82 = server0.addBan(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test132"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    java.lang.String str49 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597312928, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372928]][IPBan [ip=-1.10.1.1, expires=1465597372930]]}]"+ "'", str48.equals("Server [lastUpdate=1465597312928, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372928]][IPBan [ip=-1.10.1.1, expires=1465597372930]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597312928, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372928]][IPBan [ip=-1.10.1.1, expires=1465597372930]]}]"+ "'", str49.equals("Server [lastUpdate=1465597312928, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372928]][IPBan [ip=-1.10.1.1, expires=1465597372930]]}]"));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test133"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    boolean b29 = server0.removeBan(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b58 = server45.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    java.lang.String str66 = server59.toString();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    boolean b74 = server59.addException(iP72);
    tp2.Server server75 = new tp2.Server();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b88 = server76.addBan(iP87);
    boolean b89 = server75.removeException(iP87);
    boolean b90 = server59.addException(iP87);
    boolean b91 = server45.addBan(iP87);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server45.setTime((tp2.ITime)stubTime92);
    server30.setTime((tp2.ITime)stubTime92);
    long long95 = stubTime92.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime92);
    java.lang.String str97 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597312991, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372991]]}]"+ "'", str14.equals("Server [lastUpdate=1465597312991, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597372991]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=1465597312991, exceptions=(), bans={}]"+ "'", str97.equals("Server [lastUpdate=1465597312991, exceptions=(), bans={}]"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test134"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    server15.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    java.lang.String str24 = server17.toString();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    boolean b32 = server17.addException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    boolean b47 = server33.removeException(iP45);
    boolean b48 = server17.addException(iP45);
    boolean b49 = server15.connect(iP45);
    boolean b50 = server0.connect(iP45);
    boolean b51 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test135"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b48 = server0.removeException(iP47);
    java.lang.String str49 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597313115, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597373115]]}]"+ "'", str49.equals("Server [lastUpdate=1465597313115, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597373115]]}]"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test136"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    java.lang.String str32 = server0.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b33 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test137"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    boolean b46 = server0.repOK();
    java.lang.String str47 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597373169]][IPBan [ip=10.10.100.1, expires=1465597373170]]}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597373169]][IPBan [ip=10.10.100.1, expires=1465597373170]]}]"));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test138"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    server0.update();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b21 = server0.removeException(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test139"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    java.lang.String str27 = server0.toString();
    java.lang.String str28 = server0.toString();
    java.lang.String str29 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str29.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test140"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    boolean b59 = server44.addBan(iP57);
    boolean b60 = server36.addBan(iP57);
    boolean b61 = server9.addException(iP57);
    boolean b62 = server0.connect(iP57);
    tp2.Server server63 = new tp2.Server();
    server63.update();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b70 = server63.removeException(iP69);
    boolean b71 = server0.removeException(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test141"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    boolean b29 = server0.removeBan(iP27);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b35 = server0.connect(iP34);
    java.lang.String str36 = server0.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b56 = server44.addBan(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b62 = server44.removeException(iP61);
    boolean b63 = server37.addException(iP61);
    tp2.IP iP64 = null;
    boolean b65 = server37.removeBan(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b85 = server73.addBan(iP84);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b91 = server73.removeException(iP90);
    boolean b92 = server66.addException(iP90);
    boolean b93 = server37.removeException(iP90);
    boolean b94 = server0.connect(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597313358, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373358]]}]"+ "'", str14.equals("Server [lastUpdate=1465597313358, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373358]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=1465597313358, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=1465597313358, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test142"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    boolean b70 = server0.connect(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test143"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server15.repOK();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    server29.update();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    boolean b52 = server37.addBan(iP50);
    boolean b53 = server29.addBan(iP50);
    boolean b54 = server15.addException(iP50);
    boolean b55 = server0.addBan(iP50);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    boolean b69 = server0.removeException(iP67);
    java.lang.Integer i73 = null;
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, i73);
    boolean b75 = server0.connect(iP74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test144"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b37 = server25.addBan(iP36);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    tp2.ITime iTime45 = null;
    server38.setTime(iTime45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server38.removeException(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    server53.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    server61.update();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    boolean b76 = server61.addBan(iP74);
    boolean b77 = server53.addBan(iP74);
    boolean b78 = server38.connect(iP74);
    boolean b79 = server25.removeBan(iP74);
    boolean b80 = server0.addBan(iP74);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test145"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    server13.update();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    server21.update();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    boolean b36 = server21.addBan(iP34);
    boolean b37 = server13.addBan(iP34);
    server13.update();
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    server39.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b52 = server39.addBan(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    java.lang.String str60 = server53.toString();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    boolean b68 = server53.addException(iP66);
    tp2.Server server69 = new tp2.Server();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    boolean b83 = server69.removeException(iP81);
    boolean b84 = server53.addException(iP81);
    boolean b85 = server39.addBan(iP81);
    tp2.StubTime stubTime86 = new tp2.StubTime();
    server39.setTime((tp2.ITime)stubTime86);
    long long88 = stubTime86.getCurrentTime();
    long long89 = stubTime86.getCurrentTime();
    server13.setTime((tp2.ITime)stubTime86);
    server0.setTime((tp2.ITime)stubTime86);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime92);
    boolean b94 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597313479, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597313479, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597313479, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597313479, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597313479, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597313479, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test146"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    tp2.StubTime stubTime70 = new tp2.StubTime();
    long long71 = stubTime70.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 200000L);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test147"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    boolean b15 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597313672, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373672]]}]"+ "'", str14.equals("Server [lastUpdate=1465597313672, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373672]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test148"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server46.repOK();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server46.addException(iP81);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b91 = server46.addBan(iP90);
    boolean b92 = server0.removeException(iP90);
    tp2.IP iP97 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b98 = server0.removeBan(iP97);
    java.lang.String str99 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=10.10.100.1, expires=1465597373675]]}]"+ "'", str99.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=10.10.100.1, expires=1465597373675]]}]"));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test149"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b21 = server9.addBan(iP20);
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    tp2.ITime iTime29 = null;
    server22.setTime(iTime29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server22.removeException(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addBan(iP58);
    boolean b61 = server37.addBan(iP58);
    boolean b62 = server22.connect(iP58);
    boolean b63 = server9.removeBan(iP58);
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    java.lang.String str71 = server64.toString();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    boolean b79 = server64.addException(iP77);
    tp2.Server server80 = new tp2.Server();
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b87 = server81.connect(iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b93 = server81.addBan(iP92);
    boolean b94 = server80.removeException(iP92);
    boolean b95 = server64.addException(iP92);
    boolean b96 = server9.connect(iP92);
    boolean b97 = server0.connect(iP92);
    server0.update();
    java.lang.String str99 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597313715, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597313715, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "Server [lastUpdate=1465597313720, exceptions=(), bans={}]"+ "'", str99.equals("Server [lastUpdate=1465597313720, exceptions=(), bans={}]"));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test150"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    java.lang.String str49 = server0.toString();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    java.lang.String str58 = server50.toString();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server66.addBan(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server66.removeException(iP83);
    boolean b85 = server59.addException(iP83);
    boolean b86 = server50.removeException(iP83);
    boolean b87 = server0.addException(iP83);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b93 = server0.addBan(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597313760, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373761]][IPBan [ip=-1.10.1.1, expires=1465597373762]]}]"+ "'", str48.equals("Server [lastUpdate=1465597313760, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373761]][IPBan [ip=-1.10.1.1, expires=1465597373762]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597313760, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373761]][IPBan [ip=-1.10.1.1, expires=1465597373762]]}]"+ "'", str49.equals("Server [lastUpdate=1465597313760, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373761]][IPBan [ip=-1.10.1.1, expires=1465597373762]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=1465597313763, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=1465597313763, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test151"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    server0.update();
    java.lang.Integer i71 = null;
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, i71, (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b75 = server0.removeBan(iP74);
    java.lang.String str76 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=200000, exceptions=([100.0.10.1]), bans={}]"+ "'", str76.equals("Server [lastUpdate=200000, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test152"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    server0.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    boolean b24 = server16.repOK();
    tp2.Server server25 = new tp2.Server();
    server25.update();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server16.addException(iP38);
    boolean b42 = server0.addBan(iP38);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b48 = server0.removeBan(iP47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);
    boolean b54 = server0.addBan(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test153"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    boolean b49 = server0.repOK();
    tp2.IP iP50 = null;
    boolean b51 = server0.removeBan(iP50);
    server0.update();
    server0.update();
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server54.connect(iP59);
    server54.update();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b67 = server54.addBan(iP66);
    java.lang.String str68 = server54.toString();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    server69.update();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b82 = server69.addBan(iP81);
    boolean b83 = server54.removeBan(iP81);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b89 = server54.connect(iP88);
    boolean b90 = server0.addBan(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597313840, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373840]][IPBan [ip=-1.10.1.1, expires=1465597373842]]}]"+ "'", str48.equals("Server [lastUpdate=1465597313840, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373840]][IPBan [ip=-1.10.1.1, expires=1465597373842]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=1465597313843, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373843]]}]"+ "'", str68.equals("Server [lastUpdate=1465597313843, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597373843]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test154"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b6 = server0.removeException(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597313901, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597313901, exceptions=(), bans={}]"));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test155"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b92 = server32.removeBan(iP91);
    java.lang.Integer i95 = null;
    tp2.IP iP97 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, i95, (java.lang.Integer)(-1));
    boolean b98 = server32.addBan(iP97);
    boolean b99 = server0.removeException(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test156"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b18 = server12.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b24 = server12.addBan(iP23);
    boolean b25 = server11.removeException(iP23);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b38 = server26.addBan(iP37);
    boolean b39 = server26.repOK();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addBan(iP61);
    boolean b64 = server40.addBan(iP61);
    boolean b65 = server26.addException(iP61);
    boolean b66 = server11.addBan(iP61);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b79 = server67.addBan(iP78);
    boolean b80 = server11.removeException(iP78);
    boolean b81 = server0.removeBan(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597314007, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597314007, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test157"); }


    java.lang.Integer i2 = null;
    java.lang.Integer i3 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, i2, i3);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test158"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    boolean b57 = server49.repOK();
    tp2.Server server58 = new tp2.Server();
    server58.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    boolean b73 = server58.addBan(iP71);
    boolean b74 = server49.addException(iP71);
    boolean b75 = server0.connect(iP71);
    java.lang.Integer i77 = null;
    java.lang.Integer i79 = null;
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)1, i77, (java.lang.Integer)(-1), i79);
    boolean b81 = server0.removeException(iP80);
    java.lang.Integer i83 = null;
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)0, i83, (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b87 = server0.removeBan(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test159"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.connect(iP81);
    java.lang.String str88 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str88.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test160"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b15 = server2.addBan(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    boolean b31 = server16.addException(iP29);
    tp2.Server server32 = new tp2.Server();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    boolean b46 = server32.removeException(iP44);
    boolean b47 = server16.addException(iP44);
    boolean b48 = server2.addBan(iP44);
    boolean b49 = server0.removeException(iP44);
    boolean b50 = server0.repOK();
    java.lang.String str51 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=1465597314257, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=1465597314257, exceptions=(), bans={}]"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test161"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b58 = server0.removeBan(iP57);
    boolean b59 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test162"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b47 = server34.addBan(iP46);
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    java.lang.String str55 = server48.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addException(iP61);
    tp2.Server server64 = new tp2.Server();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b77 = server65.addBan(iP76);
    boolean b78 = server64.removeException(iP76);
    boolean b79 = server48.addException(iP76);
    boolean b80 = server34.addBan(iP76);
    tp2.StubTime stubTime81 = new tp2.StubTime();
    server34.setTime((tp2.ITime)stubTime81);
    server0.setTime((tp2.ITime)stubTime81);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b89 = server0.removeBan(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test163"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    boolean b17 = server0.repOK();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    java.lang.String str25 = server18.toString();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    boolean b33 = server18.addException(iP31);
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b47 = server34.addBan(iP46);
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    java.lang.String str55 = server48.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addException(iP61);
    tp2.Server server64 = new tp2.Server();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b77 = server65.addBan(iP76);
    boolean b78 = server64.removeException(iP76);
    boolean b79 = server48.addException(iP76);
    boolean b80 = server34.addBan(iP76);
    tp2.StubTime stubTime81 = new tp2.StubTime();
    server34.setTime((tp2.ITime)stubTime81);
    long long83 = stubTime81.getCurrentTime();
    long long84 = stubTime81.getCurrentTime();
    long long85 = stubTime81.getCurrentTime();
    server18.setTime((tp2.ITime)stubTime81);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b92 = server18.removeException(iP91);
    boolean b93 = server0.removeBan(iP91);
    java.lang.String str94 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long83 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long84 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long85 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Server [lastUpdate=1465597314630, exceptions=([100.0.10.1]), bans={}]"+ "'", str94.equals("Server [lastUpdate=1465597314630, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test164"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    java.lang.Integer i19 = null;
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, i19, (java.lang.Integer)0);
    boolean b22 = server0.connect(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test165"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    server24.update();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    boolean b39 = server24.addBan(iP37);
    boolean b40 = server16.addException(iP37);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    server41.update();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    boolean b56 = server41.addBan(iP54);
    server41.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    server58.update();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    server66.update();
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server74.connect(iP79);
    boolean b81 = server66.addBan(iP79);
    boolean b82 = server58.addBan(iP79);
    boolean b83 = server41.connect(iP79);
    boolean b84 = server16.removeBan(iP79);
    tp2.ITime iTime85 = null;
    server16.setTime(iTime85);
    tp2.StubTime stubTime87 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime87);
    long long89 = stubTime87.getCurrentTime();
    long long90 = stubTime87.getCurrentTime();
    long long91 = stubTime87.getCurrentTime();
    long long92 = stubTime87.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long90 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long91 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test166"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)(-1));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test167"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b15 = server2.addBan(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    boolean b31 = server16.addException(iP29);
    tp2.Server server32 = new tp2.Server();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    boolean b46 = server32.removeException(iP44);
    boolean b47 = server16.addException(iP44);
    boolean b48 = server2.addBan(iP44);
    boolean b49 = server0.removeException(iP44);
    boolean b50 = server0.repOK();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b64 = server51.addBan(iP63);
    java.lang.String str65 = server51.toString();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    server66.update();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b79 = server66.addBan(iP78);
    boolean b80 = server51.removeBan(iP78);
    boolean b81 = server0.removeException(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=1465597314847, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597374847]]}]"+ "'", str65.equals("Server [lastUpdate=1465597314847, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597374847]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test168"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test169"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b17 = server11.connect(iP16);
    java.lang.String str18 = server11.toString();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    server19.update();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    boolean b34 = server19.addBan(iP32);
    boolean b35 = server11.addException(iP32);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    server36.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    server53.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    server61.update();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    boolean b76 = server61.addBan(iP74);
    boolean b77 = server53.addBan(iP74);
    boolean b78 = server36.connect(iP74);
    boolean b79 = server11.removeBan(iP74);
    tp2.ITime iTime80 = null;
    server11.setTime(iTime80);
    java.lang.String str82 = server11.toString();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b88 = server11.addException(iP87);
    boolean b89 = server0.removeBan(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597314968, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597314968, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str82.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test170"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    boolean b16 = server0.repOK();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    boolean b32 = server17.addBan(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b46 = server33.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    java.lang.String str54 = server47.toString();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    boolean b62 = server47.addException(iP60);
    tp2.Server server63 = new tp2.Server();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server63.removeException(iP75);
    boolean b78 = server47.addException(iP75);
    boolean b79 = server33.addBan(iP75);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b85 = server33.connect(iP84);
    boolean b86 = server17.connect(iP84);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)100);
    boolean b92 = server17.connect(iP91);
    boolean b93 = server0.addException(iP91);
    tp2.IP iP98 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b99 = server0.removeBan(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test171"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    java.lang.String str41 = server34.toString();
    boolean b42 = server34.repOK();
    tp2.Server server43 = new tp2.Server();
    server43.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server34.addException(iP56);
    boolean b60 = server0.removeException(iP56);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test172"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test173"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    java.lang.Integer i28 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i28, (java.lang.Integer)10);
    boolean b31 = server7.removeException(iP30);
    boolean b32 = server0.removeException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    boolean b41 = server33.repOK();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b67 = server49.removeException(iP66);
    boolean b68 = server42.addException(iP66);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    server69.update();
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    server77.update();
    tp2.Server server85 = new tp2.Server();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b91 = server85.connect(iP90);
    boolean b92 = server77.addBan(iP90);
    boolean b93 = server69.addBan(iP90);
    boolean b94 = server42.addException(iP90);
    boolean b95 = server33.connect(iP90);
    boolean b96 = server0.removeBan(iP90);
    java.lang.String str97 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str97.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test174"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    tp2.ITime iTime32 = null;
    server25.setTime(iTime32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server25.removeException(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addBan(iP53);
    boolean b56 = server25.addException(iP53);
    java.lang.String str57 = server25.toString();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b63 = server25.removeBan(iP62);
    boolean b64 = server0.addException(iP62);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str57.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test175"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b30 = server18.addBan(iP29);
    boolean b31 = server18.repOK();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    server32.update();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addBan(iP53);
    boolean b56 = server32.addBan(iP53);
    boolean b57 = server18.addException(iP53);
    boolean b58 = server10.removeBan(iP53);
    java.lang.String str59 = server10.toString();
    server10.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b66 = server10.addBan(iP65);
    boolean b67 = server0.removeException(iP65);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=1465597315171, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=1465597315171, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test176"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server0.removeBan(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b94 = server0.connect(iP93);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597315260, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597375260]]}]"+ "'", str80.equals("Server [lastUpdate=1465597315260, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597375260]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597315260, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597375260]]}]"+ "'", str81.equals("Server [lastUpdate=1465597315260, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597375260]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test177"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    java.lang.Integer i80 = null;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i80, (java.lang.Integer)10);
    boolean b83 = server0.connect(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test178"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    boolean b25 = server0.repOK();
    tp2.Server server26 = new tp2.Server();
    server26.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b33 = server26.removeException(iP32);
    boolean b34 = server0.addBan(iP32);
    java.lang.Integer i37 = null;
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), i37, (java.lang.Integer)1);
    boolean b40 = server0.addBan(iP39);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test179"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)1);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test180"); }


    java.lang.Integer i0 = null;
    tp2.IP iP4 = new tp2.IP(i0, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)0);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test181"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)10);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test182"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b56 = server43.addBan(iP55);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    java.lang.String str64 = server57.toString();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addException(iP70);
    tp2.Server server73 = new tp2.Server();
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server74.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b86 = server74.addBan(iP85);
    boolean b87 = server73.removeException(iP85);
    boolean b88 = server57.addException(iP85);
    boolean b89 = server43.addBan(iP85);
    tp2.StubTime stubTime90 = new tp2.StubTime();
    server43.setTime((tp2.ITime)stubTime90);
    long long92 = stubTime90.getCurrentTime();
    long long93 = stubTime90.getCurrentTime();
    long long94 = stubTime90.getCurrentTime();
    long long95 = stubTime90.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime90);
    long long97 = stubTime90.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long97 == 200000L);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test183"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    server0.update();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b75 = server0.addBan(iP74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test184"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)(-1));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test185"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    server0.update();
    server0.update();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b17 = server0.addException(iP16);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test186"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b75 = server15.removeBan(iP74);
    boolean b76 = server0.addException(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server0.addException(iP81);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test187"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b18 = server0.removeException(iP17);
    java.lang.String str19 = server0.toString();
    boolean b20 = server0.repOK();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    server21.update();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    server29.update();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addBan(iP42);
    boolean b45 = server21.addBan(iP42);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.ITime iTime53 = null;
    server46.setTime(iTime53);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server46.removeException(iP59);
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    server61.update();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    boolean b76 = server61.addBan(iP74);
    boolean b77 = server46.addException(iP74);
    java.lang.String str78 = server46.toString();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b84 = server46.removeBan(iP83);
    boolean b85 = server21.addException(iP83);
    boolean b86 = server0.removeException(iP83);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597375755]]}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597375755]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str78.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test188"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    long long68 = stubTime63.getCurrentTime();
    long long69 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test189"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    java.lang.String str40 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597375999]]}]"+ "'", str40.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597375999]]}]"));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test190"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.ITime iTime22 = null;
    server15.setTime(iTime22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server15.removeException(iP28);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b35 = server15.removeException(iP34);
    boolean b36 = server0.addException(iP34);
    server0.update();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)10);
    boolean b43 = server0.removeException(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b49 = server0.removeBan(iP48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test191"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    server0.update();
    java.lang.String str49 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597316079, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376078]][IPBan [ip=-1.10.1.1, expires=1465597376079]]}]"+ "'", str49.equals("Server [lastUpdate=1465597316079, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376078]][IPBan [ip=-1.10.1.1, expires=1465597376079]]}]"));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test192"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    server9.update();
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b17 = server11.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b23 = server11.addBan(iP22);
    boolean b24 = server9.addBan(iP22);
    boolean b25 = server0.addException(iP22);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    java.lang.String str59 = server52.toString();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    boolean b75 = server60.addBan(iP73);
    boolean b76 = server52.addException(iP73);
    tp2.StubTime stubTime77 = new tp2.StubTime();
    server52.setTime((tp2.ITime)stubTime77);
    long long79 = stubTime77.getCurrentTime();
    long long80 = stubTime77.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime77);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long80 == 200000L);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test193"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    tp2.Server server89 = new tp2.Server();
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b95 = server89.connect(iP94);
    boolean b96 = server0.connect(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597316193, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376194]]}]"+ "'", str80.equals("Server [lastUpdate=1465597316193, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376194]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597316193, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376194]]}]"+ "'", str81.equals("Server [lastUpdate=1465597316193, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376194]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test194"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b20 = server0.removeException(iP19);
    tp2.IP iP21 = null;
    boolean b22 = server0.connect(iP21);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test195"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    boolean b49 = server0.repOK();
    tp2.IP iP50 = null;
    boolean b51 = server0.removeBan(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b57 = server0.removeBan(iP56);
    tp2.IP iP58 = null;
    boolean b59 = server0.removeBan(iP58);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597316240, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376240]][IPBan [ip=-1.10.1.1, expires=1465597376242]]}]"+ "'", str48.equals("Server [lastUpdate=1465597316240, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376240]][IPBan [ip=-1.10.1.1, expires=1465597376242]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test196"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    boolean b59 = server44.addBan(iP57);
    boolean b60 = server36.addBan(iP57);
    boolean b61 = server9.addException(iP57);
    boolean b62 = server0.connect(iP57);
    tp2.IP iP63 = null;
    boolean b64 = server0.removeBan(iP63);
    server0.update();
    java.lang.String str66 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=1465597316324, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=1465597316324, exceptions=(), bans={}]"));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test197"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)100);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test198"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    java.lang.Integer i28 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i28, (java.lang.Integer)10);
    boolean b31 = server7.removeException(iP30);
    boolean b32 = server0.removeException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    boolean b48 = server33.addBan(iP46);
    server33.update();
    server33.update();
    tp2.Server server51 = new tp2.Server();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b64 = server52.addBan(iP63);
    boolean b65 = server51.removeException(iP63);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.ITime iTime73 = null;
    server66.setTime(iTime73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server66.removeException(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b86 = server66.removeException(iP85);
    boolean b87 = server51.addException(iP85);
    boolean b88 = server33.removeBan(iP85);
    boolean b89 = server0.connect(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test199"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b58 = server0.removeBan(iP57);
    java.lang.String str59 = server0.toString();
    java.lang.String str60 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=1465597316452, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376452]][IPBan [ip=-1.10.1.1, expires=1465597376454]]}]"+ "'", str59.equals("Server [lastUpdate=1465597316452, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376452]][IPBan [ip=-1.10.1.1, expires=1465597376454]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=1465597316452, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376452]][IPBan [ip=-1.10.1.1, expires=1465597376454]]}]"+ "'", str60.equals("Server [lastUpdate=1465597316452, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376452]][IPBan [ip=-1.10.1.1, expires=1465597376454]]}]"));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test200"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b37 = server0.removeBan(iP36);
    java.lang.String str38 = server0.toString();
    // The following exception was thrown during execution in test generation
    try {
      boolean b39 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test201"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.ITime iTime47 = null;
    server0.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);
    boolean b54 = server0.addException(iP53);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test202"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    java.lang.String str10 = server2.toString();
    tp2.IP iP11 = null;
    boolean b12 = server2.removeException(iP11);
    java.lang.String str13 = server2.toString();
    java.lang.String str14 = server2.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    server23.update();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    boolean b38 = server23.addBan(iP36);
    boolean b39 = server15.addBan(iP36);
    server15.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    server41.update();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b54 = server41.addBan(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server41.addBan(iP83);
    tp2.StubTime stubTime88 = new tp2.StubTime();
    server41.setTime((tp2.ITime)stubTime88);
    long long90 = stubTime88.getCurrentTime();
    long long91 = stubTime88.getCurrentTime();
    server15.setTime((tp2.ITime)stubTime88);
    server2.setTime((tp2.ITime)stubTime88);
    server0.setTime((tp2.ITime)stubTime88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597316751, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597316751, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465597316751, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465597316751, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597316751, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465597316751, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long90 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long91 == 200000L);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test203"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b61 = server48.addBan(iP60);
    boolean b62 = server0.removeException(iP60);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b68 = server0.addException(iP67);
    java.lang.String str69 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=1465597316902, exceptions=([10.10.1.0]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376902]][IPBan [ip=-1.10.1.1, expires=1465597376904]]}]"+ "'", str69.equals("Server [lastUpdate=1465597316902, exceptions=([10.10.1.0]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597376902]][IPBan [ip=-1.10.1.1, expires=1465597376904]]}]"));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test204"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    java.lang.String str22 = server15.toString();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addException(iP28);
    tp2.Server server31 = new tp2.Server();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    boolean b45 = server31.removeException(iP43);
    boolean b46 = server15.addException(iP43);
    boolean b47 = server15.repOK();
    boolean b48 = server15.repOK();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b54 = server15.addBan(iP53);
    boolean b55 = server0.removeException(iP53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test205"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server0.removeBan(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b94 = server0.addBan(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597317036, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377036]]}]"+ "'", str80.equals("Server [lastUpdate=1465597317036, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377036]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597317036, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377036]]}]"+ "'", str81.equals("Server [lastUpdate=1465597317036, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377036]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test206"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b89 = server77.addBan(iP88);
    boolean b90 = server0.connect(iP88);
    tp2.IP iP95 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)100);
    boolean b96 = server0.addException(iP95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test207"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    java.lang.Integer i75 = null;
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i75, (java.lang.Integer)10);
    boolean b78 = server0.addException(iP77);
    java.lang.String str79 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=0, exceptions=([10.0.null.10][100.0.10.1]), bans={}]"+ "'", str79.equals("Server [lastUpdate=0, exceptions=([10.0.null.10][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test208"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    java.lang.String str18 = server0.toString();
    java.lang.String str19 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465597317220, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597377220]]}]"+ "'", str18.equals("Server [lastUpdate=1465597317220, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597377220]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=1465597317220, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597377220]]}]"+ "'", str19.equals("Server [lastUpdate=1465597317220, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597377220]]}]"));

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test209"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    boolean b17 = server0.repOK();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    tp2.StubTime stubTime65 = new tp2.StubTime();
    server18.setTime((tp2.ITime)stubTime65);
    long long67 = stubTime65.getCurrentTime();
    long long68 = stubTime65.getCurrentTime();
    long long69 = stubTime65.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime65);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b76 = server0.addBan(iP75);
    java.lang.String str77 = server0.toString();
    java.lang.String str78 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=1465597317235, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.-1.0.1, expires=260000]]}]"+ "'", str77.equals("Server [lastUpdate=1465597317235, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.-1.0.1, expires=260000]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Server [lastUpdate=1465597317235, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.-1.0.1, expires=260000]]}]"+ "'", str78.equals("Server [lastUpdate=1465597317235, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.-1.0.1, expires=260000]]}]"));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test210"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    server0.update();
    server0.update();
    java.lang.Integer i53 = null;
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0, i53);
    boolean b55 = server0.removeBan(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test211"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    java.lang.Integer i77 = null;
    java.lang.Integer i80 = null;
    tp2.IP iP81 = new tp2.IP(i77, (java.lang.Integer)10, (java.lang.Integer)0, i80);
    boolean b82 = server0.removeBan(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test212"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    boolean b57 = server49.repOK();
    tp2.Server server58 = new tp2.Server();
    server58.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    boolean b73 = server58.addBan(iP71);
    boolean b74 = server49.addException(iP71);
    boolean b75 = server0.connect(iP71);
    java.lang.String str76 = server0.toString();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10);
    boolean b82 = server0.connect(iP81);
    boolean b83 = server0.repOK();
    boolean b84 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465597317492, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377492]][IPBan [ip=-1.10.1.1, expires=1465597377495]]}]"+ "'", str76.equals("Server [lastUpdate=1465597317492, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377492]][IPBan [ip=-1.10.1.1, expires=1465597377495]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test213"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b6 = server0.removeException(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    server7.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server7.addBan(iP28);
    server7.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b46 = server33.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    java.lang.String str54 = server47.toString();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    boolean b62 = server47.addException(iP60);
    tp2.Server server63 = new tp2.Server();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server63.removeException(iP75);
    boolean b78 = server47.addException(iP75);
    boolean b79 = server33.addBan(iP75);
    tp2.StubTime stubTime80 = new tp2.StubTime();
    server33.setTime((tp2.ITime)stubTime80);
    long long82 = stubTime80.getCurrentTime();
    long long83 = stubTime80.getCurrentTime();
    server7.setTime((tp2.ITime)stubTime80);
    boolean b85 = server7.repOK();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b91 = server7.addBan(iP90);
    boolean b92 = server0.removeBan(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long82 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long83 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test214"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test215"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b21 = server9.addBan(iP20);
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    tp2.ITime iTime29 = null;
    server22.setTime(iTime29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server22.removeException(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addBan(iP58);
    boolean b61 = server37.addBan(iP58);
    boolean b62 = server22.connect(iP58);
    boolean b63 = server9.removeBan(iP58);
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    java.lang.String str71 = server64.toString();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    boolean b79 = server64.addException(iP77);
    tp2.Server server80 = new tp2.Server();
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b87 = server81.connect(iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b93 = server81.addBan(iP92);
    boolean b94 = server80.removeException(iP92);
    boolean b95 = server64.addException(iP92);
    boolean b96 = server9.connect(iP92);
    boolean b97 = server0.connect(iP92);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597317723, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597317723, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test216"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server0.addException(iP83);
    java.lang.String str85 = server0.toString();
    java.lang.String str86 = server0.toString();
    boolean b87 = server0.repOK();
    boolean b88 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Server [lastUpdate=1465597317904, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377903]]}]"+ "'", str85.equals("Server [lastUpdate=1465597317904, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377903]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=1465597317904, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377903]]}]"+ "'", str86.equals("Server [lastUpdate=1465597317904, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377903]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test217"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    boolean b57 = server49.repOK();
    tp2.Server server58 = new tp2.Server();
    server58.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    boolean b73 = server58.addBan(iP71);
    boolean b74 = server49.addException(iP71);
    boolean b75 = server0.connect(iP71);
    java.lang.String str76 = server0.toString();
    boolean b77 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465597317933, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377933]][IPBan [ip=-1.10.1.1, expires=1465597377935]]}]"+ "'", str76.equals("Server [lastUpdate=1465597317933, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597377933]][IPBan [ip=-1.10.1.1, expires=1465597377935]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test218"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server0.addException(iP83);
    java.lang.String str85 = server0.toString();
    java.lang.String str86 = server0.toString();
    boolean b87 = server0.repOK();
    java.lang.String str88 = server0.toString();
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)100);
    boolean b94 = server0.addException(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Server [lastUpdate=1465597317962, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377962]]}]"+ "'", str85.equals("Server [lastUpdate=1465597317962, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377962]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=1465597317962, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377962]]}]"+ "'", str86.equals("Server [lastUpdate=1465597317962, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377962]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Server [lastUpdate=1465597317962, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377962]]}]"+ "'", str88.equals("Server [lastUpdate=1465597317962, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597377962]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test219"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test220"); }


    java.lang.Integer i0 = null;
    tp2.IP iP4 = new tp2.IP(i0, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test221"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.addException(iP81);
    server0.update();
    boolean b89 = server0.repOK();
    java.lang.String str90 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Server [lastUpdate=1465597318128, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str90.equals("Server [lastUpdate=1465597318128, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test222"); }


    java.lang.Integer i3 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)10, i3);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test223"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b18 = server0.removeBan(iP17);
    java.lang.String str19 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597318208, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597318208, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597318208, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597318208, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597318208, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597318208, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=1465597318208, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=1465597318208, exceptions=(), bans={}]"));

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test224"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server0.connect(iP83);
    server0.update();
    boolean b89 = server0.repOK();
    boolean b90 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test225"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    server0.update();
    java.lang.String str86 = server0.toString();
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b92 = server0.addException(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597318247, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597318247, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=1465597318252, exceptions=(), bans={}]"+ "'", str86.equals("Server [lastUpdate=1465597318252, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test226"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    server13.update();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    server21.update();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    boolean b36 = server21.addBan(iP34);
    boolean b37 = server13.addBan(iP34);
    server13.update();
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    server39.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b52 = server39.addBan(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    java.lang.String str60 = server53.toString();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    boolean b68 = server53.addException(iP66);
    tp2.Server server69 = new tp2.Server();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    boolean b83 = server69.removeException(iP81);
    boolean b84 = server53.addException(iP81);
    boolean b85 = server39.addBan(iP81);
    tp2.StubTime stubTime86 = new tp2.StubTime();
    server39.setTime((tp2.ITime)stubTime86);
    long long88 = stubTime86.getCurrentTime();
    long long89 = stubTime86.getCurrentTime();
    server13.setTime((tp2.ITime)stubTime86);
    server0.setTime((tp2.ITime)stubTime86);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime92);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597318286, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597318286, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597318286, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597318286, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597318286, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597318286, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 200000L);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test227"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server18.removeException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.ITime iTime40 = null;
    server33.setTime(iTime40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server33.removeException(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b53 = server33.removeException(iP52);
    boolean b54 = server18.addException(iP52);
    boolean b55 = server0.removeBan(iP52);
    boolean b56 = server0.repOK();
    server0.update();
    server0.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server66.addBan(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server66.removeException(iP83);
    boolean b85 = server59.addException(iP83);
    boolean b86 = server0.removeException(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test228"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    server16.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    boolean b65 = server16.removeException(iP60);
    boolean b66 = server0.addException(iP60);
    boolean b67 = server0.repOK();
    tp2.IP iP68 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b69 = server0.addException(iP68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test229"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b20 = server8.addBan(iP19);
    boolean b21 = server8.repOK();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    server30.update();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addBan(iP43);
    boolean b46 = server22.addBan(iP43);
    boolean b47 = server8.addException(iP43);
    boolean b48 = server0.removeBan(iP43);
    boolean b49 = server0.repOK();
    java.lang.String str50 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465597318358, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465597318358, exceptions=(), bans={}]"));

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test230"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server0.connect(iP83);
    server0.update();
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b94 = server0.removeException(iP93);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test231"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)0);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test232"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.ITime iTime22 = null;
    server15.setTime(iTime22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server15.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    server30.update();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    server38.update();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    boolean b53 = server38.addBan(iP51);
    boolean b54 = server30.addBan(iP51);
    boolean b55 = server15.connect(iP51);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b74 = server56.removeException(iP73);
    boolean b75 = server15.connect(iP73);
    boolean b76 = server0.removeBan(iP73);
    java.lang.String str77 = server0.toString();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str77.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test233"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    java.lang.String str9 = server2.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    boolean b17 = server2.addException(iP15);
    tp2.Server server18 = new tp2.Server();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server18.removeException(iP30);
    boolean b33 = server2.addException(iP30);
    boolean b34 = server0.connect(iP30);
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b48 = server35.addBan(iP47);
    java.lang.String str49 = server35.toString();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b63 = server50.addBan(iP62);
    boolean b64 = server35.removeBan(iP62);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b70 = server35.connect(iP69);
    boolean b71 = server0.removeBan(iP69);
    boolean b72 = server0.repOK();
    java.lang.String str73 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597318508, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378508]]}]"+ "'", str49.equals("Server [lastUpdate=1465597318508, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378508]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=1465597318506, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=1465597318506, exceptions=(), bans={}]"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test234"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server0.connect(iP35);
    java.lang.String str38 = server0.toString();
    tp2.Server server39 = new tp2.Server();
    server39.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server41.addBan(iP52);
    boolean b54 = server39.addBan(iP52);
    boolean b55 = server0.connect(iP52);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b75 = server63.addBan(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b81 = server63.removeException(iP80);
    boolean b82 = server56.addException(iP80);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)100);
    boolean b88 = server56.addException(iP87);
    boolean b89 = server0.addException(iP87);
    boolean b90 = server0.repOK();
    java.lang.String str91 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597378535]]}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597378535]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Server [lastUpdate=0, exceptions=([0.-1.-1.100]), bans={[IPBan [ip=-1.10.1.1, expires=1465597378535]]}]"+ "'", str91.equals("Server [lastUpdate=0, exceptions=([0.-1.-1.100]), bans={[IPBan [ip=-1.10.1.1, expires=1465597378535]]}]"));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test235"); }


    java.lang.Integer i1 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, i1, (java.lang.Integer)10, (java.lang.Integer)100);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test236"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b62 = server50.addBan(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server50.removeException(iP67);
    boolean b69 = server43.addException(iP67);
    boolean b70 = server0.addBan(iP67);
    boolean b71 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test237"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    tp2.IP iP85 = null;
    boolean b86 = server0.removeException(iP85);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597318643, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597318643, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test238"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b14 = server2.addBan(iP13);
    boolean b15 = server0.addBan(iP13);
    java.lang.String str16 = server0.toString();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    java.lang.String str24 = server17.toString();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addException(iP38);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    boolean b57 = server42.addBan(iP55);
    server42.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    server59.update();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    server67.update();
    tp2.Server server75 = new tp2.Server();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b81 = server75.connect(iP80);
    boolean b82 = server67.addBan(iP80);
    boolean b83 = server59.addBan(iP80);
    boolean b84 = server42.connect(iP80);
    boolean b85 = server17.removeBan(iP80);
    tp2.ITime iTime86 = null;
    server17.setTime(iTime86);
    tp2.StubTime stubTime88 = new tp2.StubTime();
    server17.setTime((tp2.ITime)stubTime88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b95 = server17.removeException(iP94);
    boolean b96 = server0.addBan(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465597318677, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597378679]]}]"+ "'", str16.equals("Server [lastUpdate=1465597318677, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597378679]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test239"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test240"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    server13.update();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    server21.update();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    boolean b36 = server21.addBan(iP34);
    boolean b37 = server13.addBan(iP34);
    server13.update();
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    server39.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b52 = server39.addBan(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    java.lang.String str60 = server53.toString();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    boolean b68 = server53.addException(iP66);
    tp2.Server server69 = new tp2.Server();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    boolean b83 = server69.removeException(iP81);
    boolean b84 = server53.addException(iP81);
    boolean b85 = server39.addBan(iP81);
    tp2.StubTime stubTime86 = new tp2.StubTime();
    server39.setTime((tp2.ITime)stubTime86);
    long long88 = stubTime86.getCurrentTime();
    long long89 = stubTime86.getCurrentTime();
    server13.setTime((tp2.ITime)stubTime86);
    server0.setTime((tp2.ITime)stubTime86);
    long long92 = stubTime86.getCurrentTime();
    long long93 = stubTime86.getCurrentTime();
    long long94 = stubTime86.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597318812, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597318812, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597318812, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597318812, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597318812, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597318812, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test241"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    server0.update();
    server0.update();
    boolean b51 = server0.repOK();
    boolean b52 = server0.repOK();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    server53.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b66 = server53.addBan(iP65);
    java.lang.String str67 = server53.toString();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b81 = server68.addBan(iP80);
    boolean b82 = server53.removeBan(iP80);
    boolean b83 = server0.addBan(iP80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597318848, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378848]][IPBan [ip=-1.10.1.1, expires=1465597378850]]}]"+ "'", str48.equals("Server [lastUpdate=1465597318848, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378848]][IPBan [ip=-1.10.1.1, expires=1465597378850]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=1465597318850, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378851]]}]"+ "'", str67.equals("Server [lastUpdate=1465597318850, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378851]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test242"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server18.removeException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.ITime iTime40 = null;
    server33.setTime(iTime40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server33.removeException(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b53 = server33.removeException(iP52);
    boolean b54 = server18.addException(iP52);
    boolean b55 = server0.removeBan(iP52);
    boolean b56 = server0.repOK();
    boolean b57 = server0.repOK();
    java.lang.String str58 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=1465597318903, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597378903]]}]"+ "'", str58.equals("Server [lastUpdate=1465597318903, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597378903]]}]"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test243"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    server0.update();
    server0.update();
    boolean b51 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597318921, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378921]][IPBan [ip=-1.10.1.1, expires=1465597378922]]}]"+ "'", str48.equals("Server [lastUpdate=1465597318921, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378921]][IPBan [ip=-1.10.1.1, expires=1465597378922]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test244"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    server0.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    boolean b24 = server16.repOK();
    tp2.Server server25 = new tp2.Server();
    server25.update();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server16.addException(iP38);
    boolean b42 = server0.addBan(iP38);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b48 = server0.removeBan(iP47);
    java.lang.String str49 = server0.toString();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b55 = server0.addException(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597318935, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378935]][IPBan [ip=-1.10.1.1, expires=1465597378937]]}]"+ "'", str49.equals("Server [lastUpdate=1465597318935, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597378935]][IPBan [ip=-1.10.1.1, expires=1465597378937]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test245"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test246"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    java.lang.Integer i3 = null;
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)0, i3, (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b7 = server0.removeException(iP6);
    java.lang.Integer i8 = null;
    java.lang.Integer i11 = null;
    tp2.IP iP12 = new tp2.IP(i8, (java.lang.Integer)10, (java.lang.Integer)0, i11);
    boolean b13 = server0.addBan(iP12);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test247"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    boolean b52 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test248"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    boolean b57 = server49.repOK();
    tp2.Server server58 = new tp2.Server();
    server58.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    boolean b73 = server58.addBan(iP71);
    boolean b74 = server49.addException(iP71);
    boolean b75 = server0.connect(iP71);
    java.lang.String str76 = server0.toString();
    java.lang.String str77 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465597319025, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379025]][IPBan [ip=-1.10.1.1, expires=1465597379027]]}]"+ "'", str76.equals("Server [lastUpdate=1465597319025, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379025]][IPBan [ip=-1.10.1.1, expires=1465597379027]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=1465597319025, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379025]][IPBan [ip=-1.10.1.1, expires=1465597379027]]}]"+ "'", str77.equals("Server [lastUpdate=1465597319025, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379025]][IPBan [ip=-1.10.1.1, expires=1465597379027]]}]"));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test249"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    boolean b16 = server0.repOK();
    tp2.ITime iTime17 = null;
    server0.setTime(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test250"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    tp2.StubTime stubTime65 = new tp2.StubTime();
    server18.setTime((tp2.ITime)stubTime65);
    server0.setTime((tp2.ITime)stubTime65);
    tp2.Server server68 = new tp2.Server();
    server68.update();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server0.connect(iP81);
    tp2.ITime iTime85 = null;
    server0.setTime(iTime85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test251"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b78 = server0.removeException(iP77);
    boolean b79 = server0.repOK();
    java.lang.Integer i83 = null;
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)10, i83);
    boolean b85 = server0.connect(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test252"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    boolean b16 = server0.repOK();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b37 = server25.addBan(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server25.removeException(iP42);
    boolean b44 = server18.addException(iP42);
    boolean b45 = server18.repOK();
    boolean b46 = server18.repOK();
    boolean b47 = server18.repOK();
    tp2.Server server48 = new tp2.Server();
    server48.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    java.lang.String str57 = server50.toString();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addException(iP63);
    tp2.Server server66 = new tp2.Server();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b79 = server67.addBan(iP78);
    boolean b80 = server66.removeException(iP78);
    boolean b81 = server50.addException(iP78);
    boolean b82 = server48.connect(iP78);
    boolean b83 = server18.connect(iP78);
    boolean b84 = server0.removeBan(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test253"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)0);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test254"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b58 = server0.removeBan(iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b64 = server0.removeBan(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test255"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    tp2.IP iP85 = null;
    boolean b86 = server0.removeException(iP85);
    java.lang.String str87 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597319350, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597319350, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "Server [lastUpdate=1465597319350, exceptions=(), bans={}]"+ "'", str87.equals("Server [lastUpdate=1465597319350, exceptions=(), bans={}]"));

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test256"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    java.lang.String str41 = server34.toString();
    boolean b42 = server34.repOK();
    tp2.Server server43 = new tp2.Server();
    server43.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server34.addException(iP56);
    boolean b60 = server0.removeException(iP56);
    java.lang.Integer i64 = null;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0, i64);
    boolean b66 = server0.addException(iP65);
    java.lang.String str67 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.-1.0.null][-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str67.equals("Server [lastUpdate=0, exceptions=([-1.-1.0.null][-1.10.1.1][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test257"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    boolean b65 = server0.repOK();
    java.lang.String str66 = server0.toString();
    boolean b67 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test258"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b35 = server0.addException(iP34);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b55 = server43.addBan(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server43.removeException(iP60);
    boolean b62 = server36.addException(iP60);
    boolean b63 = server36.repOK();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    java.lang.String str71 = server64.toString();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    server72.update();
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b86 = server80.connect(iP85);
    boolean b87 = server72.addBan(iP85);
    boolean b88 = server64.addException(iP85);
    tp2.StubTime stubTime89 = new tp2.StubTime();
    server64.setTime((tp2.ITime)stubTime89);
    server36.setTime((tp2.ITime)stubTime89);
    long long92 = stubTime89.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime89);
    long long94 = stubTime89.getCurrentTime();
    long long95 = stubTime89.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test259"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b60 = server0.removeBan(iP59);
    java.lang.Integer i63 = null;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, i63, (java.lang.Integer)(-1));
    boolean b66 = server0.addBan(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    boolean b72 = server0.addBan(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);
    boolean b78 = server0.removeException(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test260"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    java.lang.String str41 = server34.toString();
    boolean b42 = server34.repOK();
    tp2.Server server43 = new tp2.Server();
    server43.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server34.addException(iP56);
    boolean b60 = server0.removeException(iP56);
    java.lang.String str61 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str61.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test261"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    tp2.IP iP65 = null;
    boolean b66 = server0.addBan(iP65);
    boolean b67 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test262"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b58 = server0.removeBan(iP57);
    java.lang.String str59 = server0.toString();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b65 = server0.addException(iP64);
    java.lang.String str66 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=1465597319835, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379835]][IPBan [ip=-1.10.1.1, expires=1465597379836]]}]"+ "'", str59.equals("Server [lastUpdate=1465597319835, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379835]][IPBan [ip=-1.10.1.1, expires=1465597379836]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=1465597319835, exceptions=([10.1.100.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379835]][IPBan [ip=-1.10.1.1, expires=1465597379836]]}]"+ "'", str66.equals("Server [lastUpdate=1465597319835, exceptions=([10.1.100.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379835]][IPBan [ip=-1.10.1.1, expires=1465597379836]]}]"));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test263"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b47 = server34.addBan(iP46);
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    java.lang.String str55 = server48.toString();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addException(iP61);
    tp2.Server server64 = new tp2.Server();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b77 = server65.addBan(iP76);
    boolean b78 = server64.removeException(iP76);
    boolean b79 = server48.addException(iP76);
    boolean b80 = server34.addBan(iP76);
    tp2.StubTime stubTime81 = new tp2.StubTime();
    server34.setTime((tp2.ITime)stubTime81);
    server0.setTime((tp2.ITime)stubTime81);
    boolean b84 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test264"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    java.lang.String str34 = server0.toString();
    boolean b35 = server0.repOK();
    server0.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b42 = server0.removeBan(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test265"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    server16.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    boolean b65 = server16.removeException(iP60);
    boolean b66 = server0.addException(iP60);
    boolean b67 = server0.repOK();
    boolean b68 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test266"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    boolean b26 = server0.repOK();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    server59.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b73 = server61.addBan(iP72);
    boolean b74 = server59.addBan(iP72);
    boolean b75 = server46.removeException(iP72);
    boolean b76 = server27.connect(iP72);
    boolean b77 = server0.removeBan(iP72);
    tp2.ITime iTime78 = null;
    server0.setTime(iTime78);
    tp2.IP iP80 = null;
    boolean b81 = server0.removeBan(iP80);
    // The following exception was thrown during execution in test generation
    try {
      boolean b82 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test267"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    boolean b2 = server0.repOK();
    tp2.Server server3 = new tp2.Server();
    tp2.IP iP8 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b9 = server3.connect(iP8);
    server3.update();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b16 = server3.addBan(iP15);
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    java.lang.String str24 = server17.toString();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    boolean b32 = server17.addException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    boolean b47 = server33.removeException(iP45);
    boolean b48 = server17.addException(iP45);
    boolean b49 = server3.addBan(iP45);
    tp2.StubTime stubTime50 = new tp2.StubTime();
    server3.setTime((tp2.ITime)stubTime50);
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b64 = server52.addBan(iP63);
    tp2.Server server65 = new tp2.Server();
    server65.update();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b79 = server67.addBan(iP78);
    boolean b80 = server65.addBan(iP78);
    boolean b81 = server52.removeException(iP78);
    boolean b82 = server3.addException(iP78);
    java.lang.String str83 = server3.toString();
    java.lang.String str84 = server3.toString();
    server3.update();
    java.lang.Integer i88 = null;
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i88, (java.lang.Integer)10);
    boolean b91 = server3.connect(iP90);
    java.lang.Integer i95 = null;
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1), i95);
    boolean b97 = server3.removeBan(iP96);
    boolean b98 = server0.addBan(iP96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=1465597319984, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379984]]}]"+ "'", str83.equals("Server [lastUpdate=1465597319984, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379984]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597319984, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379984]]}]"+ "'", str84.equals("Server [lastUpdate=1465597319984, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597379984]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test268"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    boolean b25 = server0.repOK();
    tp2.IP iP26 = null;
    boolean b27 = server0.addBan(iP26);
    boolean b28 = server0.repOK();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)100);
    boolean b34 = server0.removeException(iP33);
    boolean b35 = server0.repOK();
    java.lang.String str36 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=null, expires=1465597380028]]}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=null, expires=1465597380028]]}]"));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test269"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b37 = server25.addBan(iP36);
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    tp2.ITime iTime45 = null;
    server38.setTime(iTime45);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server38.removeException(iP51);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    server53.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    server61.update();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    boolean b76 = server61.addBan(iP74);
    boolean b77 = server53.addBan(iP74);
    boolean b78 = server38.connect(iP74);
    boolean b79 = server25.removeBan(iP74);
    boolean b80 = server0.addBan(iP74);
    boolean b81 = server0.repOK();
    java.lang.Integer i85 = null;
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)10, i85);
    boolean b87 = server0.addBan(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test270"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)10);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test271"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    boolean b34 = server0.repOK();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b48 = server35.addBan(iP47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    boolean b64 = server49.addException(iP62);
    tp2.Server server65 = new tp2.Server();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server66.addBan(iP77);
    boolean b79 = server65.removeException(iP77);
    boolean b80 = server49.addException(iP77);
    boolean b81 = server35.addBan(iP77);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b87 = server35.connect(iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b93 = server35.removeBan(iP92);
    boolean b94 = server0.removeBan(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test272"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    boolean b89 = server0.repOK();
    server0.update();
    java.lang.String str91 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597320197, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380197]]}]"+ "'", str80.equals("Server [lastUpdate=1465597320197, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380197]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597320197, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380197]]}]"+ "'", str81.equals("Server [lastUpdate=1465597320197, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380197]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380197]]}]"+ "'", str91.equals("Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380197]]}]"));

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test273"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    server27.update();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b47 = server35.addBan(iP46);
    boolean b48 = server35.repOK();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    server49.update();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addBan(iP70);
    boolean b73 = server49.addBan(iP70);
    boolean b74 = server35.addException(iP70);
    boolean b75 = server27.removeBan(iP70);
    java.lang.String str76 = server27.toString();
    server27.update();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b83 = server27.addBan(iP82);
    boolean b84 = server0.removeBan(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465597320238, exceptions=(), bans={}]"+ "'", str76.equals("Server [lastUpdate=1465597320238, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test274"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    boolean b16 = server0.repOK();
    server0.update();
    boolean b18 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test275"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    java.lang.String str17 = server0.toString();
    boolean b18 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=1465597320274, exceptions=([100.0.10.1]), bans={}]"+ "'", str17.equals("Server [lastUpdate=1465597320274, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test276"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server0.removeException(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b26 = server0.removeException(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test277"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    java.lang.String str10 = server0.toString();
    boolean b11 = server0.repOK();
    java.lang.String str12 = server0.toString();
    server0.update();
    java.lang.Integer i17 = null;
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, i17);
    boolean b19 = server0.removeBan(iP18);
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b26 = server20.connect(iP25);
    server20.update();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    boolean b35 = server20.addBan(iP33);
    server20.update();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addBan(iP58);
    boolean b61 = server37.addBan(iP58);
    boolean b62 = server20.connect(iP58);
    boolean b63 = server0.removeException(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597320281, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597320281, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465597320281, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465597320281, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597320281, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597320281, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597320281, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597320281, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test278"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    boolean b14 = server0.repOK();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    boolean b23 = server15.repOK();
    server15.update();
    server15.update();
    server15.update();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b32 = server15.addException(iP31);
    boolean b33 = server0.removeException(iP31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test279"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    java.lang.Integer i55 = null;
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i55, (java.lang.Integer)10);
    boolean b58 = server0.addException(iP57);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server0.connect(iP63);
    server0.update();
    boolean b66 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test280"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    server0.update();
    tp2.Server server53 = new tp2.Server();
    server53.update();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server53.connect(iP83);
    boolean b88 = server0.addBan(iP83);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b94 = server0.addBan(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test281"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    boolean b26 = server0.repOK();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    server59.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b73 = server61.addBan(iP72);
    boolean b74 = server59.addBan(iP72);
    boolean b75 = server46.removeException(iP72);
    boolean b76 = server27.connect(iP72);
    boolean b77 = server0.removeBan(iP72);
    java.lang.Integer i80 = null;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), i80, (java.lang.Integer)1);
    boolean b83 = server0.removeException(iP82);
    java.lang.Integer i85 = null;
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, i85, (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b89 = server0.removeBan(iP88);
    java.lang.String str90 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Server [lastUpdate=1465597320923, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597380923]]}]"+ "'", str90.equals("Server [lastUpdate=1465597320923, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597380923]]}]"));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test282"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b14 = server0.removeBan(iP13);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597320973, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597320973, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test283"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    tp2.Server server49 = new tp2.Server();
    server49.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    java.lang.String str58 = server51.toString();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addException(iP64);
    tp2.Server server67 = new tp2.Server();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b80 = server68.addBan(iP79);
    boolean b81 = server67.removeException(iP79);
    boolean b82 = server51.addException(iP79);
    boolean b83 = server49.connect(iP79);
    boolean b84 = server0.addBan(iP79);
    boolean b85 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597320977, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380977]][IPBan [ip=-1.10.1.1, expires=1465597380980]]}]"+ "'", str48.equals("Server [lastUpdate=1465597320977, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597380977]][IPBan [ip=-1.10.1.1, expires=1465597380980]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test284"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b94 = server0.removeException(iP93);
    boolean b95 = server0.repOK();
    server0.update();
    java.lang.String str97 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597321055, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381056]]}]"+ "'", str80.equals("Server [lastUpdate=1465597321055, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381056]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597321055, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381056]]}]"+ "'", str81.equals("Server [lastUpdate=1465597321055, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381056]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381056]]}]"+ "'", str97.equals("Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381056]]}]"));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test285"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    java.lang.String str35 = server28.toString();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addException(iP49);
    tp2.StubTime stubTime53 = new tp2.StubTime();
    server28.setTime((tp2.ITime)stubTime53);
    server0.setTime((tp2.ITime)stubTime53);
    long long56 = stubTime53.getCurrentTime();
    long long57 = stubTime53.getCurrentTime();
    long long58 = stubTime53.getCurrentTime();
    long long59 = stubTime53.getCurrentTime();
    long long60 = stubTime53.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long58 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long59 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 200000L);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test286"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    java.lang.String str40 = server33.toString();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    boolean b48 = server33.addException(iP46);
    tp2.Server server49 = new tp2.Server();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b62 = server50.addBan(iP61);
    boolean b63 = server49.removeException(iP61);
    boolean b64 = server33.addException(iP61);
    boolean b65 = server33.repOK();
    boolean b66 = server33.repOK();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b72 = server33.addBan(iP71);
    boolean b73 = server0.addException(iP71);
    boolean b74 = server0.repOK();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b80 = server0.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b86 = server0.addBan(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test287"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test288"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    java.lang.String str32 = server0.toString();
    java.lang.String str33 = server0.toString();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)100);
    boolean b39 = server0.connect(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b53 = server40.addBan(iP52);
    java.lang.String str54 = server40.toString();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b68 = server55.addBan(iP67);
    boolean b69 = server40.removeBan(iP67);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b75 = server40.connect(iP74);
    boolean b76 = server0.connect(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b82 = server0.removeBan(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=1465597321155, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381155]]}]"+ "'", str54.equals("Server [lastUpdate=1465597321155, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381155]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test289"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    boolean b77 = server0.repOK();
    boolean b78 = server0.repOK();
    tp2.Server server79 = new tp2.Server();
    server79.update();
    java.lang.Integer i82 = null;
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)0, i82, (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b86 = server79.removeException(iP85);
    java.lang.Integer i87 = null;
    java.lang.Integer i90 = null;
    tp2.IP iP91 = new tp2.IP(i87, (java.lang.Integer)10, (java.lang.Integer)0, i90);
    boolean b92 = server79.addBan(iP91);
    boolean b93 = server0.removeException(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test290"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    java.lang.String str41 = server34.toString();
    boolean b42 = server34.repOK();
    tp2.Server server43 = new tp2.Server();
    server43.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server34.addException(iP56);
    boolean b60 = server0.removeException(iP56);
    java.lang.Integer i64 = null;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0, i64);
    boolean b66 = server0.addException(iP65);
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b79 = server67.addBan(iP78);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b85 = server67.removeException(iP84);
    java.lang.Integer i88 = null;
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i88, (java.lang.Integer)10);
    boolean b91 = server67.removeException(iP90);
    tp2.IP iP96 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b97 = server67.removeException(iP96);
    boolean b98 = server0.addException(iP96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test291"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    server27.update();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    boolean b50 = server35.addBan(iP48);
    boolean b51 = server27.addBan(iP48);
    boolean b52 = server0.addException(iP48);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server60.removeException(iP77);
    boolean b79 = server53.addException(iP77);
    boolean b80 = server53.repOK();
    boolean b81 = server53.repOK();
    boolean b82 = server53.repOK();
    tp2.StubTime stubTime83 = new tp2.StubTime();
    long long84 = stubTime83.getCurrentTime();
    server53.setTime((tp2.ITime)stubTime83);
    server0.setTime((tp2.ITime)stubTime83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long84 == 200000L);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test292"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    java.lang.String str8 = server1.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    server9.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    boolean b24 = server9.addBan(iP22);
    boolean b25 = server1.addException(iP22);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    boolean b41 = server26.addBan(iP39);
    server26.update();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server26.connect(iP64);
    boolean b69 = server1.removeBan(iP64);
    tp2.ITime iTime70 = null;
    server1.setTime(iTime70);
    tp2.StubTime stubTime72 = new tp2.StubTime();
    server1.setTime((tp2.ITime)stubTime72);
    long long74 = stubTime72.getCurrentTime();
    long long75 = stubTime72.getCurrentTime();
    long long76 = stubTime72.getCurrentTime();
    long long77 = stubTime72.getCurrentTime();
    long long78 = stubTime72.getCurrentTime();
    long long79 = stubTime72.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime72);
    long long81 = stubTime72.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long77 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long78 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long81 == 200000L);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test293"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b84 = server0.addBan(iP83);
    tp2.IP iP85 = null;
    boolean b86 = server0.removeException(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test294"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test295"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b56 = server43.addBan(iP55);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    java.lang.String str64 = server57.toString();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addException(iP70);
    tp2.Server server73 = new tp2.Server();
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server74.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b86 = server74.addBan(iP85);
    boolean b87 = server73.removeException(iP85);
    boolean b88 = server57.addException(iP85);
    boolean b89 = server43.addBan(iP85);
    tp2.StubTime stubTime90 = new tp2.StubTime();
    server43.setTime((tp2.ITime)stubTime90);
    long long92 = stubTime90.getCurrentTime();
    long long93 = stubTime90.getCurrentTime();
    long long94 = stubTime90.getCurrentTime();
    long long95 = stubTime90.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime90);
    java.lang.String str97 = server0.toString();
    boolean b98 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=1465597321361, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381361]]}]"+ "'", str97.equals("Server [lastUpdate=1465597321361, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381361]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test296"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server0.removeException(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b26 = server0.connect(iP25);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test297"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b12 = server0.connect(iP11);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test298"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    boolean b17 = server0.repOK();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    tp2.StubTime stubTime65 = new tp2.StubTime();
    server18.setTime((tp2.ITime)stubTime65);
    long long67 = stubTime65.getCurrentTime();
    long long68 = stubTime65.getCurrentTime();
    long long69 = stubTime65.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime65);
    long long71 = stubTime65.getCurrentTime();
    long long72 = stubTime65.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 200000L);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test299"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    server0.update();
    tp2.Server server11 = new tp2.Server();
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b18 = server12.connect(iP17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b24 = server12.addBan(iP23);
    boolean b25 = server11.removeException(iP23);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b38 = server26.addBan(iP37);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    tp2.ITime iTime46 = null;
    server39.setTime(iTime46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server39.removeException(iP52);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server54.connect(iP59);
    server54.update();
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server62.connect(iP67);
    server62.update();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server54.addBan(iP75);
    boolean b79 = server39.connect(iP75);
    boolean b80 = server26.removeBan(iP75);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b86 = server26.removeBan(iP85);
    boolean b87 = server11.addException(iP85);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b93 = server11.addException(iP92);
    boolean b94 = server0.connect(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test300"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)100);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test301"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    boolean b25 = server0.repOK();
    tp2.IP iP26 = null;
    boolean b27 = server0.addBan(iP26);
    java.lang.String str28 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=null, expires=1465597381546]]}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=null, expires=1465597381546]]}]"));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test302"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    boolean b25 = server0.repOK();
    tp2.Server server26 = new tp2.Server();
    server26.update();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b33 = server26.removeException(iP32);
    boolean b34 = server0.addBan(iP32);
    java.lang.Integer i37 = null;
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), i37, (java.lang.Integer)1);
    boolean b40 = server0.addBan(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b46 = server0.removeException(iP45);
    tp2.IP iP47 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b48 = server0.addException(iP47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test303"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b15 = server2.addBan(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    boolean b31 = server16.addException(iP29);
    tp2.Server server32 = new tp2.Server();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    boolean b46 = server32.removeException(iP44);
    boolean b47 = server16.addException(iP44);
    boolean b48 = server2.addBan(iP44);
    boolean b49 = server0.removeException(iP44);
    java.lang.String str50 = server0.toString();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    boolean b59 = server51.repOK();
    server51.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b66 = server51.addBan(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b72 = server51.removeBan(iP71);
    boolean b73 = server0.addBan(iP71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465597321573, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465597321573, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test304"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    java.lang.Integer i75 = null;
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i75, (java.lang.Integer)10);
    boolean b78 = server0.addException(iP77);
    boolean b79 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test305"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    java.lang.String str16 = server0.toString();
    java.lang.String str17 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465597321716, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381716]]}]"+ "'", str16.equals("Server [lastUpdate=1465597321716, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381716]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=1465597321716, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381716]]}]"+ "'", str17.equals("Server [lastUpdate=1465597321716, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381716]]}]"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test306"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    java.lang.String str49 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465597321719, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381719]][IPBan [ip=-1.10.1.1, expires=1465597381720]]}]"+ "'", str49.equals("Server [lastUpdate=1465597321719, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381719]][IPBan [ip=-1.10.1.1, expires=1465597381720]]}]"));

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test307"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    boolean b46 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test308"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    java.lang.String str79 = server0.toString();
    boolean b80 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=1465597321747, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381747]]}]"+ "'", str79.equals("Server [lastUpdate=1465597321747, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597381747]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test309"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    java.lang.String str32 = server0.toString();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    boolean b46 = server33.repOK();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    server47.update();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addBan(iP68);
    boolean b71 = server47.addBan(iP68);
    boolean b72 = server33.addException(iP68);
    boolean b73 = server0.removeBan(iP68);
    java.lang.String str74 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str74.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test310"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.ITime iTime22 = null;
    server15.setTime(iTime22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server15.removeException(iP28);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b35 = server15.removeException(iP34);
    boolean b36 = server0.addException(iP34);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b50 = server37.addBan(iP49);
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    java.lang.String str58 = server51.toString();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addException(iP64);
    tp2.Server server67 = new tp2.Server();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b80 = server68.addBan(iP79);
    boolean b81 = server67.removeException(iP79);
    boolean b82 = server51.addException(iP79);
    boolean b83 = server37.addBan(iP79);
    tp2.StubTime stubTime84 = new tp2.StubTime();
    server37.setTime((tp2.ITime)stubTime84);
    long long86 = stubTime84.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime84);
    long long88 = stubTime84.getCurrentTime();
    long long89 = stubTime84.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long86 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 200000L);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test311"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    boolean b26 = server0.repOK();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    server59.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b73 = server61.addBan(iP72);
    boolean b74 = server59.addBan(iP72);
    boolean b75 = server46.removeException(iP72);
    boolean b76 = server27.connect(iP72);
    boolean b77 = server0.removeBan(iP72);
    java.lang.Integer i80 = null;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), i80, (java.lang.Integer)1);
    boolean b83 = server0.removeException(iP82);
    boolean b84 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test312"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    server0.update();
    server0.update();
    boolean b51 = server0.repOK();
    boolean b52 = server0.repOK();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b58 = server0.addException(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597321929, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381929]][IPBan [ip=-1.10.1.1, expires=1465597381931]]}]"+ "'", str48.equals("Server [lastUpdate=1465597321929, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597381929]][IPBan [ip=-1.10.1.1, expires=1465597381931]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test313"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)(-1));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test314"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test315"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    java.lang.String str34 = server0.toString();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    tp2.ITime iTime42 = null;
    server35.setTime(iTime42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server35.removeException(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b55 = server35.removeException(iP54);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b74 = server56.removeException(iP73);
    java.lang.Integer i77 = null;
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i77, (java.lang.Integer)10);
    boolean b80 = server56.removeException(iP79);
    boolean b81 = server35.connect(iP79);
    boolean b82 = server0.removeBan(iP79);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test316"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.addException(iP81);
    server0.update();
    server0.update();
    java.lang.String str90 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Server [lastUpdate=1465597322009, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str90.equals("Server [lastUpdate=1465597322009, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test317"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    server0.update();
    tp2.Server server15 = new tp2.Server();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    tp2.ITime iTime36 = null;
    server29.setTime(iTime36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server29.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    server52.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    boolean b67 = server52.addBan(iP65);
    boolean b68 = server44.addBan(iP65);
    boolean b69 = server29.connect(iP65);
    boolean b70 = server16.removeBan(iP65);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b76 = server16.removeBan(iP75);
    boolean b77 = server15.addException(iP75);
    boolean b78 = server0.connect(iP75);
    server0.update();
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)100);
    boolean b85 = server0.connect(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test318"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    boolean b36 = server0.removeException(iP33);
    boolean b37 = server0.repOK();
    java.lang.Integer i41 = null;
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, i41);
    boolean b43 = server0.addBan(iP42);
    boolean b44 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597322078, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597322078, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test319"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server0.connect(iP35);
    java.lang.String str38 = server0.toString();
    tp2.Server server39 = new tp2.Server();
    server39.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server41.addBan(iP52);
    boolean b54 = server39.addBan(iP52);
    boolean b55 = server0.connect(iP52);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    java.lang.String str63 = server56.toString();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    boolean b71 = server56.addException(iP69);
    server56.update();
    java.lang.Integer i76 = null;
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, i76);
    boolean b78 = server56.removeBan(iP77);
    boolean b79 = server0.removeException(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597382088]]}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597382088]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test320"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    boolean b7 = server0.repOK();
    server0.update();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    java.lang.String str16 = server9.toString();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    boolean b24 = server9.addException(iP22);
    tp2.Server server25 = new tp2.Server();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b38 = server26.addBan(iP37);
    boolean b39 = server25.removeException(iP37);
    boolean b40 = server9.addException(iP37);
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server41.addBan(iP52);
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server54.connect(iP59);
    tp2.ITime iTime61 = null;
    server54.setTime(iTime61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server54.removeException(iP67);
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    server69.update();
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    server77.update();
    tp2.Server server85 = new tp2.Server();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b91 = server85.connect(iP90);
    boolean b92 = server77.addBan(iP90);
    boolean b93 = server69.addBan(iP90);
    boolean b94 = server54.connect(iP90);
    boolean b95 = server41.removeBan(iP90);
    boolean b96 = server9.addException(iP90);
    boolean b97 = server0.removeBan(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test321"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    boolean b71 = server0.repOK();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    java.lang.String str79 = server72.toString();
    boolean b80 = server72.repOK();
    tp2.Server server81 = new tp2.Server();
    server81.update();
    tp2.Server server83 = new tp2.Server();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b89 = server83.connect(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b95 = server83.addBan(iP94);
    boolean b96 = server81.addBan(iP94);
    boolean b97 = server72.addException(iP94);
    boolean b98 = server0.connect(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str79.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test322"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    boolean b49 = server0.repOK();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b55 = server0.connect(iP54);
    boolean b56 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597322213, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382214]][IPBan [ip=-1.10.1.1, expires=1465597382215]]}]"+ "'", str48.equals("Server [lastUpdate=1465597322213, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382214]][IPBan [ip=-1.10.1.1, expires=1465597382215]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test323"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    boolean b46 = server0.removeBan(iP44);
    boolean b47 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test324"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)(-1));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test325"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    server27.update();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    boolean b50 = server35.addBan(iP48);
    boolean b51 = server27.addBan(iP48);
    boolean b52 = server0.addException(iP48);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    java.lang.String str60 = server53.toString();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    boolean b68 = server53.addException(iP66);
    tp2.Server server69 = new tp2.Server();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    boolean b83 = server69.removeException(iP81);
    boolean b84 = server53.addException(iP81);
    boolean b85 = server0.addException(iP81);
    java.lang.String str86 = server0.toString();
    tp2.IP iP87 = null;
    boolean b88 = server0.removeException(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1][-1.10.1.1]), bans={}]"+ "'", str86.equals("Server [lastUpdate=0, exceptions=([100.0.10.1][-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test326"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    server0.update();
    tp2.IP iP16 = null;
    boolean b17 = server0.connect(iP16);
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    boolean b33 = server18.addBan(iP31);
    server18.update();
    server18.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    java.lang.String str43 = server36.toString();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    boolean b59 = server44.addBan(iP57);
    boolean b60 = server36.addException(iP57);
    boolean b61 = server36.repOK();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b67 = server36.connect(iP66);
    boolean b68 = server18.connect(iP66);
    boolean b69 = server0.addBan(iP66);
    java.lang.String str70 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=1465597322337, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382337]][IPBan [ip=10.-1.10.0, expires=1465597382340]]}]"+ "'", str70.equals("Server [lastUpdate=1465597322337, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382337]][IPBan [ip=10.-1.10.0, expires=1465597382340]]}]"));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test327"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b15 = server0.addBan(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b21 = server0.addException(iP20);
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b41 = server29.addBan(iP40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b47 = server29.removeException(iP46);
    boolean b48 = server22.addException(iP46);
    boolean b49 = server22.repOK();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b62 = server50.addBan(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server50.removeException(iP67);
    java.lang.Integer i71 = null;
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i71, (java.lang.Integer)10);
    boolean b74 = server50.removeException(iP73);
    boolean b75 = server22.addBan(iP73);
    boolean b76 = server0.removeBan(iP73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test328"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    server0.update();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b71 = server0.removeBan(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test329"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    java.lang.Integer i28 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i28, (java.lang.Integer)10);
    boolean b31 = server7.removeException(iP30);
    boolean b32 = server0.removeException(iP30);
    boolean b33 = server0.repOK();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b39 = server0.removeException(iP38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test330"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.addException(iP81);
    server0.update();
    server0.update();
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b95 = server0.addException(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test331"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    server0.update();
    boolean b54 = server0.repOK();
    boolean b55 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test332"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    boolean b69 = server0.repOK();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b76 = server0.removeException(iP75);
    java.lang.Integer i80 = null;
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, i80);
    boolean b82 = server0.addException(iP81);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test333"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)0);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test334"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    java.lang.String str40 = server33.toString();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    boolean b48 = server33.addException(iP46);
    tp2.Server server49 = new tp2.Server();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b62 = server50.addBan(iP61);
    boolean b63 = server49.removeException(iP61);
    boolean b64 = server33.addException(iP61);
    boolean b65 = server33.repOK();
    boolean b66 = server33.repOK();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b72 = server33.addBan(iP71);
    boolean b73 = server0.addException(iP71);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b79 = server0.connect(iP78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test335"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    boolean b16 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test336"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    boolean b89 = server0.repOK();
    boolean b90 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597322671, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382672]]}]"+ "'", str80.equals("Server [lastUpdate=1465597322671, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382672]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597322671, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382672]]}]"+ "'", str81.equals("Server [lastUpdate=1465597322671, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597382672]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test337"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)1);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test338"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test339"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    java.lang.String str15 = server8.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    boolean b31 = server16.addBan(iP29);
    boolean b32 = server8.addException(iP29);
    tp2.StubTime stubTime33 = new tp2.StubTime();
    server8.setTime((tp2.ITime)stubTime33);
    server0.setTime((tp2.ITime)stubTime33);
    long long36 = stubTime33.getCurrentTime();
    long long37 = stubTime33.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 200000L);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test340"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server16.connect(iP67);
    boolean b69 = server0.connect(iP67);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test341"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    boolean b12 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597322839, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597322839, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597322839, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597322839, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test342"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    java.lang.String str14 = server7.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server7.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    server32.update();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addBan(iP45);
    server32.update();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    server49.update();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addBan(iP70);
    boolean b73 = server49.addBan(iP70);
    boolean b74 = server32.connect(iP70);
    boolean b75 = server7.removeBan(iP70);
    java.lang.String str76 = server7.toString();
    java.lang.String str77 = server7.toString();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b83 = server7.removeBan(iP82);
    boolean b84 = server0.addBan(iP82);
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b90 = server0.addBan(iP89);
    server0.update();
    boolean b92 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str76.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str77.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test343"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server0.addBan(iP59);
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b66 = server0.connect(iP65);
    java.lang.String str67 = server0.toString();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)100);
    boolean b73 = server0.addException(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597382879]][IPBan [ip=-1.0.10.1, expires=1465597382884]]}]"+ "'", str67.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597382879]][IPBan [ip=-1.0.10.1, expires=1465597382884]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test344"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    boolean b28 = server0.repOK();
    boolean b29 = server0.repOK();
    java.lang.String str30 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test345"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server16.connect(iP67);
    java.lang.Integer i71 = null;
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i71, (java.lang.Integer)10);
    boolean b74 = server16.addException(iP73);
    boolean b75 = server0.removeException(iP73);
    java.lang.String str76 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465597322912, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597382912]]}]"+ "'", str76.equals("Server [lastUpdate=1465597322912, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597382912]]}]"));

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test346"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b6 = server0.removeException(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    java.lang.Integer i9 = null;
    java.lang.Integer i12 = null;
    tp2.IP iP13 = new tp2.IP(i9, (java.lang.Integer)10, (java.lang.Integer)0, i12);
    boolean b14 = server0.removeBan(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test347"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    boolean b59 = server44.addBan(iP57);
    boolean b60 = server36.addBan(iP57);
    boolean b61 = server9.addException(iP57);
    boolean b62 = server0.connect(iP57);
    tp2.IP iP63 = null;
    boolean b64 = server0.removeBan(iP63);
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.ITime iTime72 = null;
    server65.setTime(iTime72);
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server65.removeException(iP78);
    tp2.Server server80 = new tp2.Server();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b86 = server80.connect(iP85);
    server80.update();
    tp2.Server server88 = new tp2.Server();
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b94 = server88.connect(iP93);
    boolean b95 = server80.addBan(iP93);
    boolean b96 = server65.addException(iP93);
    boolean b97 = server0.addException(iP93);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test348"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    server9.update();
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b17 = server11.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b23 = server11.addBan(iP22);
    boolean b24 = server9.addBan(iP22);
    boolean b25 = server0.addException(iP22);
    java.lang.Integer i29 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, i29);
    boolean b31 = server0.removeBan(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test349"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    java.lang.String str27 = server0.toString();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    boolean b43 = server28.addBan(iP41);
    boolean b44 = server28.repOK();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server28.connect(iP56);
    boolean b59 = server0.removeException(iP56);
    server0.update();
    java.lang.String str61 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=1465597323081, exceptions=([-1.10.1.1]), bans={}]"+ "'", str61.equals("Server [lastUpdate=1465597323081, exceptions=([-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test350"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    java.lang.String str17 = server0.toString();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b38 = server25.addBan(iP37);
    tp2.Server server39 = new tp2.Server();
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b45 = server39.connect(iP44);
    java.lang.String str46 = server39.toString();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    boolean b54 = server39.addException(iP52);
    tp2.Server server55 = new tp2.Server();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    boolean b69 = server55.removeException(iP67);
    boolean b70 = server39.addException(iP67);
    boolean b71 = server25.addBan(iP67);
    tp2.StubTime stubTime72 = new tp2.StubTime();
    server25.setTime((tp2.ITime)stubTime72);
    server18.setTime((tp2.ITime)stubTime72);
    long long75 = stubTime72.getCurrentTime();
    long long76 = stubTime72.getCurrentTime();
    long long77 = stubTime72.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=1465597323100, exceptions=([100.0.10.1]), bans={}]"+ "'", str17.equals("Server [lastUpdate=1465597323100, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long77 == 200000L);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test351"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server0.addException(iP83);
    java.lang.String str85 = server0.toString();
    java.lang.String str86 = server0.toString();
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b92 = server0.addBan(iP91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Server [lastUpdate=1465597323130, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597383130]]}]"+ "'", str85.equals("Server [lastUpdate=1465597323130, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597383130]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=1465597323130, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597383130]]}]"+ "'", str86.equals("Server [lastUpdate=1465597323130, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597383130]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test352"); }


    java.lang.Integer i1 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), i1, (java.lang.Integer)0, (java.lang.Integer)0);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test353"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.ITime iTime54 = null;
    server47.setTime(iTime54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server47.removeException(iP60);
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server62.connect(iP67);
    server62.update();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    server70.update();
    tp2.Server server78 = new tp2.Server();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b84 = server78.connect(iP83);
    boolean b85 = server70.addBan(iP83);
    boolean b86 = server62.addBan(iP83);
    boolean b87 = server47.connect(iP83);
    boolean b88 = server34.removeBan(iP83);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b94 = server34.removeBan(iP93);
    boolean b95 = server0.connect(iP93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test354"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    boolean b47 = server0.repOK();
    java.lang.String str48 = server0.toString();
    server0.update();
    server0.update();
    boolean b51 = server0.repOK();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    java.lang.String str59 = server52.toString();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    boolean b67 = server52.addException(iP65);
    tp2.Server server68 = new tp2.Server();
    tp2.Server server69 = new tp2.Server();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b75 = server69.connect(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b81 = server69.addBan(iP80);
    boolean b82 = server68.removeException(iP80);
    boolean b83 = server52.addException(iP80);
    boolean b84 = server52.repOK();
    boolean b85 = server52.repOK();
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b91 = server52.addBan(iP90);
    boolean b92 = server0.removeException(iP90);
    java.lang.String str93 = server0.toString();
    tp2.IP iP98 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b99 = server0.addBan(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465597323210, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383210]][IPBan [ip=-1.10.1.1, expires=1465597383213]]}]"+ "'", str48.equals("Server [lastUpdate=1465597323210, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383210]][IPBan [ip=-1.10.1.1, expires=1465597383213]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "Server [lastUpdate=1465597323213, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383210]][IPBan [ip=-1.10.1.1, expires=1465597383213]]}]"+ "'", str93.equals("Server [lastUpdate=1465597323213, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383210]][IPBan [ip=-1.10.1.1, expires=1465597383213]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test355"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server18.removeException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.ITime iTime40 = null;
    server33.setTime(iTime40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server33.removeException(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b53 = server33.removeException(iP52);
    boolean b54 = server18.addException(iP52);
    boolean b55 = server0.removeBan(iP52);
    boolean b56 = server0.repOK();
    server0.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b70 = server58.addBan(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server58.removeException(iP75);
    java.lang.Integer i79 = null;
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i79, (java.lang.Integer)10);
    boolean b82 = server58.removeException(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b88 = server58.removeBan(iP87);
    boolean b89 = server0.removeBan(iP87);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b95 = server0.removeBan(iP94);
    java.lang.String str96 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "Server [lastUpdate=1465597323255, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597383252]]}]"+ "'", str96.equals("Server [lastUpdate=1465597323255, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597383252]]}]"));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test356"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b26 = server14.addBan(iP25);
    boolean b27 = server13.removeException(iP25);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b40 = server28.addBan(iP39);
    boolean b41 = server28.repOK();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server28.addException(iP63);
    boolean b68 = server13.addBan(iP63);
    boolean b69 = server0.addException(iP63);
    boolean b70 = server0.repOK();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b76 = server0.addException(iP75);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test357"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    tp2.IP iP83 = null;
    boolean b84 = server0.connect(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597323320, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383320]]}]"+ "'", str80.equals("Server [lastUpdate=1465597323320, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383320]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597323320, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383320]]}]"+ "'", str81.equals("Server [lastUpdate=1465597323320, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383320]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test358"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b86 = server0.connect(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597323353, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383353]]}]"+ "'", str80.equals("Server [lastUpdate=1465597323353, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383353]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test359"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    java.lang.String str47 = server0.toString();
    boolean b48 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=1465597323428, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383428]][IPBan [ip=-1.10.1.1, expires=1465597383429]]}]"+ "'", str47.equals("Server [lastUpdate=1465597323428, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383428]][IPBan [ip=-1.10.1.1, expires=1465597383429]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test360"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    server9.update();
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b17 = server11.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b23 = server11.addBan(iP22);
    boolean b24 = server9.addBan(iP22);
    boolean b25 = server0.addException(iP22);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    java.lang.String str59 = server52.toString();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    boolean b75 = server60.addBan(iP73);
    boolean b76 = server52.addException(iP73);
    tp2.StubTime stubTime77 = new tp2.StubTime();
    server52.setTime((tp2.ITime)stubTime77);
    long long79 = stubTime77.getCurrentTime();
    long long80 = stubTime77.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime77);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b87 = server0.addBan(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long80 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test361"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b75 = server15.removeBan(iP74);
    boolean b76 = server0.addException(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server0.addException(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b88 = server0.removeBan(iP87);
    boolean b89 = server0.repOK();
    java.lang.String str90 = server0.toString();
    server0.update();
    boolean b92 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1][100.-1.-1.0]), bans={}]"+ "'", str90.equals("Server [lastUpdate=0, exceptions=([100.0.10.1][100.-1.-1.0]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test362"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b58 = server0.removeBan(iP57);
    java.lang.String str59 = server0.toString();
    server0.update();
    java.lang.String str61 = server0.toString();
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server62.connect(iP67);
    tp2.ITime iTime69 = null;
    server62.setTime(iTime69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server62.removeException(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b82 = server62.removeException(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b88 = server62.connect(iP87);
    boolean b89 = server0.addBan(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=1465597323517, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383517]][IPBan [ip=-1.10.1.1, expires=1465597383519]]}]"+ "'", str59.equals("Server [lastUpdate=1465597323517, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383517]][IPBan [ip=-1.10.1.1, expires=1465597383519]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=1465597323521, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383517]][IPBan [ip=-1.10.1.1, expires=1465597383519]]}]"+ "'", str61.equals("Server [lastUpdate=1465597323521, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597383517]][IPBan [ip=-1.10.1.1, expires=1465597383519]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test363"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b40 = server28.addBan(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server28.removeException(iP45);
    java.lang.Integer i49 = null;
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i49, (java.lang.Integer)10);
    boolean b52 = server28.removeException(iP51);
    boolean b53 = server0.addBan(iP51);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b59 = server0.connect(iP58);
    server0.update();
    java.lang.Integer i64 = null;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, i64);
    boolean b66 = server0.addException(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test364"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b55 = server43.addBan(iP54);
    boolean b56 = server43.repOK();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    server65.update();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    boolean b80 = server65.addBan(iP78);
    boolean b81 = server57.addBan(iP78);
    boolean b82 = server43.addException(iP78);
    boolean b83 = server0.removeBan(iP78);
    tp2.ITime iTime84 = null;
    server0.setTime(iTime84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test365"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.IP iP43 = null;
    boolean b44 = server0.removeException(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addBan(iP58);
    server45.update();
    server45.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    java.lang.String str70 = server63.toString();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    server71.update();
    tp2.Server server79 = new tp2.Server();
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b85 = server79.connect(iP84);
    boolean b86 = server71.addBan(iP84);
    boolean b87 = server63.addException(iP84);
    boolean b88 = server63.repOK();
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b94 = server63.connect(iP93);
    boolean b95 = server45.connect(iP93);
    boolean b96 = server0.addException(iP93);
    java.lang.String str97 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Server [lastUpdate=1465597323613, exceptions=([10.-1.10.0]), bans={[IPBan [ip=100.0.10.1, expires=1465597383613]]}]"+ "'", str97.equals("Server [lastUpdate=1465597323613, exceptions=([10.-1.10.0]), bans={[IPBan [ip=100.0.10.1, expires=1465597383613]]}]"));

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test366"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.ITime iTime22 = null;
    server15.setTime(iTime22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server15.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    server30.update();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    server38.update();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    boolean b53 = server38.addBan(iP51);
    boolean b54 = server30.addBan(iP51);
    boolean b55 = server15.connect(iP51);
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b68 = server56.addBan(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b74 = server56.removeException(iP73);
    boolean b75 = server15.connect(iP73);
    boolean b76 = server0.removeBan(iP73);
    java.lang.String str77 = server0.toString();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b83 = server0.removeException(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str77.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test367"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.connect(iP81);
    // The following exception was thrown during execution in test generation
    try {
      boolean b88 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test368"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    server15.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    java.lang.String str24 = server17.toString();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    boolean b32 = server17.addException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    boolean b47 = server33.removeException(iP45);
    boolean b48 = server17.addException(iP45);
    boolean b49 = server15.connect(iP45);
    boolean b50 = server0.connect(iP45);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test369"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    server46.update();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b59 = server46.addBan(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    java.lang.String str67 = server60.toString();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    boolean b75 = server60.addException(iP73);
    tp2.Server server76 = new tp2.Server();
    tp2.Server server77 = new tp2.Server();
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b83 = server77.connect(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b89 = server77.addBan(iP88);
    boolean b90 = server76.removeException(iP88);
    boolean b91 = server60.addException(iP88);
    boolean b92 = server46.addBan(iP88);
    tp2.StubTime stubTime93 = new tp2.StubTime();
    server46.setTime((tp2.ITime)stubTime93);
    long long95 = stubTime93.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime93);
    long long97 = stubTime93.getCurrentTime();
    long long98 = stubTime93.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long97 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long98 == 200000L);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test370"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)0);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test371"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    java.lang.String str71 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test372"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b26 = server14.addBan(iP25);
    boolean b27 = server13.removeException(iP25);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b40 = server28.addBan(iP39);
    boolean b41 = server28.repOK();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server28.addException(iP63);
    boolean b68 = server13.addBan(iP63);
    boolean b69 = server0.addException(iP63);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test373"); }


    tp2.Server server0 = new tp2.Server();
    boolean b1 = server0.repOK();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    java.lang.String str9 = server2.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addException(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    server27.update();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    boolean b42 = server27.addBan(iP40);
    server27.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    server52.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    boolean b67 = server52.addBan(iP65);
    boolean b68 = server44.addBan(iP65);
    boolean b69 = server27.connect(iP65);
    boolean b70 = server2.removeBan(iP65);
    tp2.ITime iTime71 = null;
    server2.setTime(iTime71);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server2.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    long long77 = stubTime73.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long77 == 200000L);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test374"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b18 = server0.removeBan(iP17);
    tp2.Server server19 = new tp2.Server();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b25 = server19.connect(iP24);
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b31 = server19.addBan(iP30);
    boolean b32 = server19.repOK();
    server19.update();
    boolean b34 = server19.repOK();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b47 = server35.addBan(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server35.removeException(iP52);
    java.lang.Integer i56 = null;
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i56, (java.lang.Integer)10);
    boolean b59 = server35.removeException(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b65 = server35.removeException(iP64);
    boolean b66 = server19.removeBan(iP64);
    boolean b67 = server0.removeBan(iP64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597323985, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597323985, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597323985, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597323985, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597323985, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597323985, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test375"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    tp2.ITime iTime32 = null;
    server25.setTime(iTime32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server25.removeException(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addBan(iP53);
    boolean b56 = server25.addException(iP53);
    java.lang.String str57 = server25.toString();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b63 = server25.removeBan(iP62);
    boolean b64 = server0.addException(iP62);
    java.lang.Integer i67 = null;
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, i67, (java.lang.Integer)1);
    boolean b70 = server0.removeBan(iP69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str57.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test376"); }


    java.lang.Integer i3 = null;
    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)10, i3);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test377"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    boolean b30 = server15.addBan(iP28);
    boolean b31 = server0.addException(iP28);
    java.lang.String str32 = server0.toString();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server33.addBan(iP44);
    boolean b46 = server33.repOK();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    server47.update();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addBan(iP68);
    boolean b71 = server47.addBan(iP68);
    boolean b72 = server33.addException(iP68);
    boolean b73 = server0.removeBan(iP68);
    java.lang.Integer i75 = null;
    java.lang.Integer i77 = null;
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)(-1), i75, (java.lang.Integer)100, i77);
    boolean b79 = server0.removeBan(iP78);
    // The following exception was thrown during execution in test generation
    try {
      boolean b80 = server0.repOK();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test378"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    server0.update();
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    tp2.ITime iTime70 = null;
    server63.setTime(iTime70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server63.removeException(iP76);
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b83 = server63.removeException(iP82);
    boolean b84 = server48.addException(iP82);
    boolean b85 = server0.removeBan(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test379"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server0.connect(iP83);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b93 = server0.removeException(iP92);
    boolean b94 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test380"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    boolean b17 = server0.repOK();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    tp2.StubTime stubTime65 = new tp2.StubTime();
    server18.setTime((tp2.ITime)stubTime65);
    long long67 = stubTime65.getCurrentTime();
    long long68 = stubTime65.getCurrentTime();
    long long69 = stubTime65.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime65);
    boolean b71 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test381"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    boolean b28 = server0.repOK();
    boolean b29 = server0.repOK();
    tp2.Server server30 = new tp2.Server();
    server30.update();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server30.connect(iP60);
    boolean b65 = server0.connect(iP60);
    java.lang.String str66 = server0.toString();
    java.lang.String str67 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str67.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test382"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    boolean b38 = server30.repOK();
    tp2.Server server39 = new tp2.Server();
    server39.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server41.addBan(iP52);
    boolean b54 = server39.addBan(iP52);
    boolean b55 = server30.addException(iP52);
    boolean b56 = server30.repOK();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b62 = server30.addException(iP61);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b68 = server30.removeException(iP67);
    boolean b69 = server0.removeException(iP67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test383"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    server0.update();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b22 = server0.addException(iP21);
    java.lang.String str23 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465597324263, exceptions=([0.1.0.0][100.0.10.1]), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465597324263, exceptions=([0.1.0.0][100.0.10.1]), bans={}]"));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test384"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test385"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b75 = server15.removeBan(iP74);
    boolean b76 = server0.addException(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server0.addException(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b88 = server0.removeBan(iP87);
    boolean b89 = server0.repOK();
    boolean b90 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test386"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    boolean b28 = server0.repOK();
    server0.update();
    server0.update();
    boolean b31 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test387"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1));

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test388"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.addException(iP81);
    boolean b88 = server0.repOK();
    boolean b89 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test389"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.ITime iTime43 = null;
    server0.setTime(iTime43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b58 = server45.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    java.lang.String str66 = server59.toString();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    boolean b74 = server59.addException(iP72);
    tp2.Server server75 = new tp2.Server();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b88 = server76.addBan(iP87);
    boolean b89 = server75.removeException(iP87);
    boolean b90 = server59.addException(iP87);
    boolean b91 = server45.addBan(iP87);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server45.setTime((tp2.ITime)stubTime92);
    long long94 = stubTime92.getCurrentTime();
    long long95 = stubTime92.getCurrentTime();
    long long96 = stubTime92.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime92);
    boolean b98 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test390"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b60 = server0.removeBan(iP59);
    java.lang.Integer i63 = null;
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, i63, (java.lang.Integer)(-1));
    boolean b66 = server0.addBan(iP65);
    java.lang.String str67 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597384461]][IPBan [ip=1.100.null.-1, expires=1465597384463]]}]"+ "'", str67.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597384461]][IPBan [ip=1.100.null.-1, expires=1465597384463]]}]"));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test391"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    java.lang.Integer i75 = null;
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i75, (java.lang.Integer)10);
    boolean b78 = server0.addException(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b84 = server0.addBan(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test392"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    server0.update();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b40 = server0.removeBan(iP39);
    boolean b41 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test393"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    long long65 = stubTime62.getCurrentTime();
    long long66 = stubTime62.getCurrentTime();
    long long67 = stubTime62.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test394"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    boolean b7 = server0.repOK();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    java.lang.String str16 = server8.toString();
    java.lang.String str17 = server8.toString();
    java.lang.String str18 = server8.toString();
    boolean b19 = server8.repOK();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b26 = server20.connect(iP25);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    boolean b46 = server20.addException(iP44);
    java.lang.String str47 = server20.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addBan(iP61);
    boolean b64 = server48.repOK();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b77 = server65.addBan(iP76);
    boolean b78 = server48.connect(iP76);
    boolean b79 = server20.removeException(iP76);
    boolean b80 = server8.addException(iP76);
    boolean b81 = server0.connect(iP76);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465597324552, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465597324552, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=1465597324552, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=1465597324552, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465597324552, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465597324552, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test395"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    java.lang.String str10 = server0.toString();
    boolean b11 = server0.repOK();
    java.lang.String str12 = server0.toString();
    boolean b13 = server0.repOK();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);
    boolean b19 = server0.addBan(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597324582, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597324582, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465597324582, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465597324582, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597324582, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597324582, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597324582, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597324582, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test396"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    boolean b46 = server0.removeBan(iP44);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)10);
    boolean b52 = server0.addException(iP51);
    java.lang.String str53 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.0.1.10][-1.10.1.1]), bans={}]"+ "'", str53.equals("Server [lastUpdate=0, exceptions=([-1.0.1.10][-1.10.1.1]), bans={}]"));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test397"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    java.lang.String str47 = server0.toString();
    java.lang.Integer i51 = null;
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)100, i51);
    boolean b53 = server0.addException(iP52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=1465597324601, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384601]][IPBan [ip=-1.10.1.1, expires=1465597384603]]}]"+ "'", str47.equals("Server [lastUpdate=1465597324601, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384601]][IPBan [ip=-1.10.1.1, expires=1465597384603]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test398"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    java.lang.String str41 = server34.toString();
    boolean b42 = server34.repOK();
    tp2.Server server43 = new tp2.Server();
    server43.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server34.addException(iP56);
    boolean b60 = server0.removeException(iP56);
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b66 = server0.removeBan(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test399"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b45 = server0.addBan(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server46.repOK();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server46.addException(iP81);
    tp2.IP iP90 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b91 = server46.addBan(iP90);
    boolean b92 = server0.removeException(iP90);
    java.lang.String str93 = server0.toString();
    tp2.IP iP94 = null;
    boolean b95 = server0.connect(iP94);
    java.lang.String str96 = server0.toString();
    boolean b97 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597384642]][IPBan [ip=10.10.100.1, expires=1465597384643]]}]"+ "'", str93.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597384642]][IPBan [ip=10.10.100.1, expires=1465597384643]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597384642]][IPBan [ip=10.10.100.1, expires=1465597384643]]}]"+ "'", str96.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={[IPBan [ip=-1.10.1.1, expires=1465597384642]][IPBan [ip=10.10.100.1, expires=1465597384643]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test400"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    tp2.StubTime stubTime82 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b89 = server0.addBan(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)100);
    boolean b95 = server0.connect(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597324681, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384682]]}]"+ "'", str80.equals("Server [lastUpdate=1465597324681, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384682]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597324681, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384682]]}]"+ "'", str81.equals("Server [lastUpdate=1465597324681, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384682]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test401"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)(-1));

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test402"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b33 = server0.addBan(iP32);
    boolean b34 = server0.repOK();
    boolean b35 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test403"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    server0.update();
    java.lang.String str90 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597324730, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384730]]}]"+ "'", str80.equals("Server [lastUpdate=1465597324730, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384730]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597324730, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384730]]}]"+ "'", str81.equals("Server [lastUpdate=1465597324730, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384730]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384730]]}]"+ "'", str90.equals("Server [lastUpdate=200000, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597384730]]}]"));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test404"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)0);
    boolean b84 = server0.addBan(iP83);
    boolean b85 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test405"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server0.connect(iP51);
    boolean b53 = server0.repOK();
    tp2.Server server54 = new tp2.Server();
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b60 = server54.connect(iP59);
    server54.update();
    java.lang.String str62 = server54.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b88 = server70.removeException(iP87);
    boolean b89 = server63.addException(iP87);
    boolean b90 = server54.removeException(iP87);
    boolean b91 = server0.connect(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=1465597324818, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=1465597324818, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test406"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    boolean b9 = server0.repOK();
    boolean b10 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test407"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)1);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test408"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server0.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    java.lang.String str28 = server21.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    boolean b36 = server21.addException(iP34);
    tp2.Server server37 = new tp2.Server();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b50 = server38.addBan(iP49);
    boolean b51 = server37.removeException(iP49);
    boolean b52 = server21.addException(iP49);
    boolean b53 = server21.repOK();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server21.removeBan(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    java.lang.String str68 = server60.toString();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b74 = server60.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    boolean b80 = server60.removeException(iP79);
    boolean b81 = server21.removeBan(iP79);
    // The following exception was thrown during execution in test generation
    try {
      boolean b82 = server0.addBan(iP79);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=1465597324863, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=1465597324863, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test409"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.ITime iTime43 = null;
    server0.setTime(iTime43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b58 = server45.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    java.lang.String str66 = server59.toString();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    boolean b74 = server59.addException(iP72);
    tp2.Server server75 = new tp2.Server();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b88 = server76.addBan(iP87);
    boolean b89 = server75.removeException(iP87);
    boolean b90 = server59.addException(iP87);
    boolean b91 = server45.addBan(iP87);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server45.setTime((tp2.ITime)stubTime92);
    long long94 = stubTime92.getCurrentTime();
    long long95 = stubTime92.getCurrentTime();
    long long96 = stubTime92.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime92);
    long long98 = stubTime92.getCurrentTime();
    long long99 = stubTime92.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long98 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long99 == 200000L);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test410"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b56 = server43.addBan(iP55);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    java.lang.String str64 = server57.toString();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addException(iP70);
    tp2.Server server73 = new tp2.Server();
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server74.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b86 = server74.addBan(iP85);
    boolean b87 = server73.removeException(iP85);
    boolean b88 = server57.addException(iP85);
    boolean b89 = server43.addBan(iP85);
    tp2.StubTime stubTime90 = new tp2.StubTime();
    server43.setTime((tp2.ITime)stubTime90);
    long long92 = stubTime90.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime90);
    long long94 = stubTime90.getCurrentTime();
    long long95 = stubTime90.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long94 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test411"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.connect(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test412"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test413"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)1);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test414"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    java.lang.String str34 = server0.toString();
    server0.update();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b41 = server0.addException(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test415"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    tp2.ITime iTime21 = null;
    server14.setTime(iTime21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server14.removeException(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    server29.update();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    boolean b52 = server37.addBan(iP50);
    boolean b53 = server29.addBan(iP50);
    boolean b54 = server14.connect(iP50);
    boolean b55 = server1.removeBan(iP50);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b61 = server1.removeBan(iP60);
    boolean b62 = server0.addException(iP60);
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b68 = server0.addBan(iP67);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test416"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server0.connect(iP83);
    java.lang.String str88 = server0.toString();
    boolean b89 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597385125]]}]"+ "'", str88.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=-1.10.1.1, expires=1465597385125]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test417"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b55 = server43.addBan(iP54);
    boolean b56 = server43.repOK();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    server65.update();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    boolean b80 = server65.addBan(iP78);
    boolean b81 = server57.addBan(iP78);
    boolean b82 = server43.addException(iP78);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b88 = server43.addBan(iP87);
    boolean b89 = server0.addException(iP87);
    boolean b90 = server0.repOK();
    java.lang.String str91 = server0.toString();
    java.lang.String str92 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "Server [lastUpdate=1465597325166, exceptions=([10.10.100.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385166]]}]"+ "'", str91.equals("Server [lastUpdate=1465597325166, exceptions=([10.10.100.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385166]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "Server [lastUpdate=1465597325166, exceptions=([10.10.100.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385166]]}]"+ "'", str92.equals("Server [lastUpdate=1465597325166, exceptions=([10.10.100.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385166]]}]"));

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test418"); }


    java.lang.Integer i0 = null;
    tp2.IP iP4 = new tp2.IP(i0, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test419"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.IP iP26 = null;
    boolean b27 = server0.removeBan(iP26);
    server0.update();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    server29.update();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b42 = server29.addBan(iP41);
    java.lang.String str43 = server29.toString();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b57 = server44.addBan(iP56);
    boolean b58 = server29.removeBan(iP56);
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b64 = server29.connect(iP63);
    boolean b65 = server0.addException(iP63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=1465597325206, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385206]]}]"+ "'", str43.equals("Server [lastUpdate=1465597325206, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385206]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test420"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    java.lang.String str9 = server2.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addException(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    server27.update();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    boolean b42 = server27.addBan(iP40);
    server27.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    server44.update();
    tp2.Server server52 = new tp2.Server();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b58 = server52.connect(iP57);
    server52.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    boolean b67 = server52.addBan(iP65);
    boolean b68 = server44.addBan(iP65);
    boolean b69 = server27.connect(iP65);
    boolean b70 = server2.removeBan(iP65);
    tp2.ITime iTime71 = null;
    server2.setTime(iTime71);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server2.setTime((tp2.ITime)stubTime73);
    java.lang.Integer i77 = null;
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i77, (java.lang.Integer)10);
    boolean b80 = server2.addException(iP79);
    boolean b81 = server0.addException(iP79);
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b87 = server0.connect(iP86);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b93 = server0.removeBan(iP92);
    java.lang.String str94 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Server [lastUpdate=1465597325238, exceptions=([10.0.null.10]), bans={}]"+ "'", str94.equals("Server [lastUpdate=1465597325238, exceptions=([10.0.null.10]), bans={}]"));

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test421"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    tp2.StubTime stubTime65 = new tp2.StubTime();
    server18.setTime((tp2.ITime)stubTime65);
    server0.setTime((tp2.ITime)stubTime65);
    boolean b68 = server0.repOK();
    java.lang.String str69 = server0.toString();
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)100);
    boolean b75 = server0.removeBan(iP74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=1465597325302, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597385302]]}]"+ "'", str69.equals("Server [lastUpdate=1465597325302, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597385302]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test422"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    boolean b42 = server0.connect(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b55 = server43.addBan(iP54);
    boolean b56 = server43.repOK();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    server65.update();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    boolean b80 = server65.addBan(iP78);
    boolean b81 = server57.addBan(iP78);
    boolean b82 = server43.addException(iP78);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b88 = server43.addBan(iP87);
    boolean b89 = server0.addException(iP87);
    tp2.IP iP90 = null;
    boolean b91 = server0.removeException(iP90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test423"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    server17.update();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server17.addBan(iP38);
    server17.update();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b56 = server43.addBan(iP55);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    java.lang.String str64 = server57.toString();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    boolean b72 = server57.addException(iP70);
    tp2.Server server73 = new tp2.Server();
    tp2.Server server74 = new tp2.Server();
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b80 = server74.connect(iP79);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b86 = server74.addBan(iP85);
    boolean b87 = server73.removeException(iP85);
    boolean b88 = server57.addException(iP85);
    boolean b89 = server43.addBan(iP85);
    tp2.StubTime stubTime90 = new tp2.StubTime();
    server43.setTime((tp2.ITime)stubTime90);
    long long92 = stubTime90.getCurrentTime();
    long long93 = stubTime90.getCurrentTime();
    server17.setTime((tp2.ITime)stubTime90);
    server0.setTime((tp2.ITime)stubTime90);
    long long96 = stubTime90.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 200000L);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test424"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    boolean b85 = server0.repOK();
    java.lang.String str86 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597325438, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597325438, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=1465597325438, exceptions=(), bans={}]"+ "'", str86.equals("Server [lastUpdate=1465597325438, exceptions=(), bans={}]"));

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test425"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test426"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    boolean b36 = server0.removeException(iP33);
    boolean b37 = server0.repOK();
    java.lang.Integer i41 = null;
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, i41);
    boolean b43 = server0.addBan(iP42);
    java.lang.String str44 = server0.toString();
    java.lang.String str45 = server0.toString();
    server0.update();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b52 = server0.connect(iP51);
    java.lang.String str53 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597325480, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597325480, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=1465597325480, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597385482]]}]"+ "'", str44.equals("Server [lastUpdate=1465597325480, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597385482]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465597325480, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597385482]]}]"+ "'", str45.equals("Server [lastUpdate=1465597325480, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597385482]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=1465597325482, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597385482]]}]"+ "'", str53.equals("Server [lastUpdate=1465597325482, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597385482]]}]"));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test427"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)1);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test428"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    java.lang.String str34 = server0.toString();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    server35.update();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b48 = server35.addBan(iP47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    boolean b64 = server49.addException(iP62);
    tp2.Server server65 = new tp2.Server();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server66.addBan(iP77);
    boolean b79 = server65.removeException(iP77);
    boolean b80 = server49.addException(iP77);
    boolean b81 = server35.addBan(iP77);
    boolean b82 = server35.repOK();
    java.lang.String str83 = server35.toString();
    server35.update();
    server35.update();
    boolean b86 = server35.repOK();
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b92 = server35.connect(iP91);
    boolean b93 = server0.addBan(iP91);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=1465597325505, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385505]][IPBan [ip=-1.10.1.1, expires=1465597385509]]}]"+ "'", str83.equals("Server [lastUpdate=1465597325505, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385505]][IPBan [ip=-1.10.1.1, expires=1465597385509]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test429"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server0.addException(iP83);
    java.lang.String str85 = server0.toString();
    java.lang.String str86 = server0.toString();
    boolean b87 = server0.repOK();
    java.lang.String str88 = server0.toString();
    java.lang.String str89 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"+ "'", str85.equals("Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"+ "'", str86.equals("Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"+ "'", str88.equals("Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"+ "'", str89.equals("Server [lastUpdate=1465597325546, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.0.10.1, expires=1465597385546]]}]"));

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test430"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.ITime iTime47 = null;
    server0.setTime(iTime47);
    java.lang.Integer i50 = null;
    java.lang.Integer i52 = null;
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)1, i50, (java.lang.Integer)(-1), i52);
    // The following exception was thrown during execution in test generation
    try {
      boolean b54 = server0.addBan(iP53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test431"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    java.lang.String str41 = server34.toString();
    boolean b42 = server34.repOK();
    tp2.Server server43 = new tp2.Server();
    server43.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    boolean b58 = server43.addBan(iP56);
    boolean b59 = server34.addException(iP56);
    boolean b60 = server0.removeException(iP56);
    java.lang.Integer i61 = null;
    tp2.IP iP65 = new tp2.IP(i61, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b66 = server0.removeException(iP65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test432"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    tp2.Server server2 = new tp2.Server();
    tp2.IP iP7 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b8 = server2.connect(iP7);
    server2.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    boolean b25 = server10.addBan(iP23);
    boolean b26 = server2.addBan(iP23);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    tp2.ITime iTime47 = null;
    server40.setTime(iTime47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server40.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    server55.update();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    server63.update();
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    boolean b78 = server63.addBan(iP76);
    boolean b79 = server55.addBan(iP76);
    boolean b80 = server40.connect(iP76);
    boolean b81 = server27.removeBan(iP76);
    boolean b82 = server2.addBan(iP76);
    boolean b83 = server0.connect(iP76);
    java.lang.String str84 = server0.toString();
    tp2.IP iP85 = null;
    boolean b86 = server0.removeException(iP85);
    tp2.IP iP91 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);
    boolean b92 = server0.removeException(iP91);
    boolean b93 = server0.repOK();
    tp2.IP iP98 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b99 = server0.removeException(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597325644, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597325644, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test433"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    server13.update();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    boolean b28 = server13.addBan(iP26);
    server13.update();
    server13.update();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    server31.update();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b44 = server31.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    java.lang.String str52 = server45.toString();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addException(iP58);
    tp2.Server server61 = new tp2.Server();
    tp2.Server server62 = new tp2.Server();
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b68 = server62.connect(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b74 = server62.addBan(iP73);
    boolean b75 = server61.removeException(iP73);
    boolean b76 = server45.addException(iP73);
    boolean b77 = server31.addBan(iP73);
    tp2.StubTime stubTime78 = new tp2.StubTime();
    server31.setTime((tp2.ITime)stubTime78);
    server13.setTime((tp2.ITime)stubTime78);
    tp2.Server server81 = new tp2.Server();
    server81.update();
    tp2.Server server83 = new tp2.Server();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b89 = server83.connect(iP88);
    tp2.IP iP94 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b95 = server83.addBan(iP94);
    boolean b96 = server81.addBan(iP94);
    boolean b97 = server13.connect(iP94);
    boolean b98 = server0.connect(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597325690, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597325690, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465597325690, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465597325690, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465597325690, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465597325690, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test434"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.ITime iTime35 = null;
    server28.setTime(iTime35);
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server28.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    boolean b66 = server51.addBan(iP64);
    boolean b67 = server43.addBan(iP64);
    boolean b68 = server28.connect(iP64);
    boolean b69 = server15.removeBan(iP64);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b75 = server15.removeBan(iP74);
    boolean b76 = server0.addException(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server0.addException(iP81);
    server0.update();
    java.lang.String str84 = server0.toString();
    boolean b85 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597325739, exceptions=([100.0.10.1][100.-1.-1.0]), bans={}]"+ "'", str84.equals("Server [lastUpdate=1465597325739, exceptions=([100.0.10.1][100.-1.-1.0]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test435"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    server0.update();
    java.lang.Integer i66 = null;
    tp2.IP iP70 = new tp2.IP(i66, (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b71 = server0.addBan(iP70);
    java.lang.Integer i74 = null;
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), i74, (java.lang.Integer)1);
    boolean b77 = server0.connect(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test436"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b14 = server0.connect(iP13);
    tp2.Server server15 = new tp2.Server();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    boolean b29 = server15.removeException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    tp2.ITime iTime37 = null;
    server30.setTime(iTime37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server30.removeException(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    server53.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    boolean b68 = server53.addBan(iP66);
    boolean b69 = server45.addBan(iP66);
    boolean b70 = server30.connect(iP66);
    tp2.Server server71 = new tp2.Server();
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b77 = server71.connect(iP76);
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b83 = server71.addBan(iP82);
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b89 = server71.removeException(iP88);
    boolean b90 = server30.connect(iP88);
    boolean b91 = server15.removeBan(iP88);
    boolean b92 = server0.connect(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597325802, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597325802, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test437"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    java.lang.String str10 = server0.toString();
    boolean b11 = server0.repOK();
    tp2.Server server12 = new tp2.Server();
    tp2.IP iP17 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b18 = server12.connect(iP17);
    server12.update();
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b25 = server12.addBan(iP24);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    java.lang.String str33 = server26.toString();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    boolean b41 = server26.addException(iP39);
    tp2.Server server42 = new tp2.Server();
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b55 = server43.addBan(iP54);
    boolean b56 = server42.removeException(iP54);
    boolean b57 = server26.addException(iP54);
    boolean b58 = server12.addBan(iP54);
    boolean b59 = server12.repOK();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b73 = server60.addBan(iP72);
    boolean b74 = server12.removeException(iP72);
    boolean b75 = server0.removeException(iP72);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b81 = server0.connect(iP80);
    tp2.Server server82 = new tp2.Server();
    server82.update();
    java.lang.Integer i85 = null;
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)0, i85, (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b89 = server82.removeException(iP88);
    boolean b90 = server0.removeBan(iP88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597325841, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597325841, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465597325841, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465597325841, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597325841, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597325841, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test438"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b21 = server9.addBan(iP20);
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    tp2.ITime iTime29 = null;
    server22.setTime(iTime29);
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server22.removeException(iP35);
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    boolean b60 = server45.addBan(iP58);
    boolean b61 = server37.addBan(iP58);
    boolean b62 = server22.connect(iP58);
    boolean b63 = server9.removeBan(iP58);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server9.addBan(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b75 = server9.connect(iP74);
    boolean b76 = server0.removeBan(iP74);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b82 = server0.addException(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test439"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b32 = server0.connect(iP31);
    java.lang.String str33 = server0.toString();
    java.lang.Integer i36 = null;
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i36, (java.lang.Integer)10);
    boolean b39 = server0.removeException(iP38);
    boolean b40 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test440"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    java.lang.Integer i85 = null;
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i85, (java.lang.Integer)10);
    boolean b88 = server0.connect(iP87);
    boolean b89 = server0.repOK();
    server0.update();
    boolean b91 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597325988, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385988]]}]"+ "'", str80.equals("Server [lastUpdate=1465597325988, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385988]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597325988, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385988]]}]"+ "'", str81.equals("Server [lastUpdate=1465597325988, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597385988]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test441"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b40 = server28.addBan(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server28.removeException(iP45);
    java.lang.Integer i49 = null;
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i49, (java.lang.Integer)10);
    boolean b52 = server28.removeException(iP51);
    boolean b53 = server0.addBan(iP51);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b59 = server0.connect(iP58);
    boolean b60 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test442"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    tp2.ITime iTime17 = null;
    server10.setTime(iTime17);
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server10.removeException(iP23);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server10.addException(iP38);
    boolean b42 = server0.removeException(iP38);
    tp2.Server server43 = new tp2.Server();
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b49 = server43.connect(iP48);
    server43.update();
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b63 = server51.addBan(iP62);
    boolean b64 = server51.repOK();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    server65.update();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    server73.update();
    tp2.Server server81 = new tp2.Server();
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b87 = server81.connect(iP86);
    boolean b88 = server73.addBan(iP86);
    boolean b89 = server65.addBan(iP86);
    boolean b90 = server51.addException(iP86);
    boolean b91 = server43.removeBan(iP86);
    boolean b92 = server0.removeException(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test443"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test444"); }


    tp2.Server server0 = new tp2.Server();
    boolean b1 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test445"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)10);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test446"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    server9.update();
    tp2.Server server11 = new tp2.Server();
    tp2.IP iP16 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b17 = server11.connect(iP16);
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b23 = server11.addBan(iP22);
    boolean b24 = server9.addBan(iP22);
    boolean b25 = server0.addException(iP22);
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    server34.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    boolean b49 = server34.addBan(iP47);
    boolean b50 = server26.addBan(iP47);
    boolean b51 = server0.addBan(iP47);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);
    boolean b57 = server0.addBan(iP56);
    boolean b58 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test447"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    boolean b26 = server0.repOK();
    java.lang.String str27 = server0.toString();
    boolean b28 = server0.repOK();
    server0.update();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b35 = server0.addException(iP34);
    boolean b36 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465597326144, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386144]]}]"+ "'", str27.equals("Server [lastUpdate=1465597326144, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386144]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test448"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    boolean b57 = server49.repOK();
    tp2.Server server58 = new tp2.Server();
    server58.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    boolean b73 = server58.addBan(iP71);
    boolean b74 = server49.addException(iP71);
    boolean b75 = server0.connect(iP71);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test449"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    java.lang.String str17 = server0.toString();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server0.removeBan(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=1465597326180, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386180]]}]"+ "'", str17.equals("Server [lastUpdate=1465597326180, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386180]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test450"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    boolean b28 = server0.repOK();
    boolean b29 = server0.repOK();
    tp2.StubTime stubTime30 = new tp2.StubTime();
    long long31 = stubTime30.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime30);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    boolean b48 = server33.addBan(iP46);
    boolean b49 = server0.addBan(iP46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test451"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    java.lang.String str34 = server0.toString();
    boolean b35 = server0.repOK();
    java.lang.Integer i37 = null;
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)0, i37, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b41 = server0.removeException(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1][100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test452"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b32 = server0.connect(iP31);
    java.lang.String str33 = server0.toString();
    boolean b34 = server0.repOK();
    tp2.Server server35 = new tp2.Server();
    tp2.IP iP40 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b41 = server35.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b54 = server42.addBan(iP53);
    tp2.IP iP59 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b60 = server42.removeException(iP59);
    boolean b61 = server35.addException(iP59);
    boolean b62 = server35.repOK();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    tp2.IP iP74 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b75 = server63.addBan(iP74);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b81 = server63.removeException(iP80);
    java.lang.Integer i84 = null;
    tp2.IP iP86 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i84, (java.lang.Integer)10);
    boolean b87 = server63.removeException(iP86);
    boolean b88 = server35.addBan(iP86);
    tp2.IP iP93 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b94 = server35.connect(iP93);
    boolean b95 = server0.addException(iP93);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test453"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    boolean b28 = server0.repOK();
    server0.update();
    server0.update();
    java.lang.Integer i34 = null;
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)10, i34);
    boolean b36 = server0.addBan(iP35);
    boolean b37 = server0.repOK();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b57 = server45.addBan(iP56);
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b63 = server45.removeException(iP62);
    boolean b64 = server38.addException(iP62);
    boolean b65 = server38.repOK();
    tp2.Server server66 = new tp2.Server();
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b72 = server66.connect(iP71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b78 = server66.addBan(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server66.removeException(iP83);
    java.lang.Integer i87 = null;
    tp2.IP iP89 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i87, (java.lang.Integer)10);
    boolean b90 = server66.removeException(iP89);
    boolean b91 = server38.addBan(iP89);
    boolean b92 = server0.connect(iP89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test454"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    java.lang.String str36 = server29.toString();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    boolean b44 = server29.addException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    boolean b59 = server45.removeException(iP57);
    boolean b60 = server29.addException(iP57);
    boolean b61 = server15.addBan(iP57);
    tp2.StubTime stubTime62 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime62);
    server0.setTime((tp2.ITime)stubTime62);
    tp2.IP iP65 = null;
    boolean b66 = server0.addBan(iP65);
    server0.update();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)100);
    // The following exception was thrown during execution in test generation
    try {
      boolean b73 = server0.connect(iP72);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test455"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    tp2.ITime iTime69 = null;
    server0.setTime(iTime69);
    tp2.StubTime stubTime71 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime71);
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b78 = server0.removeException(iP77);
    boolean b79 = server0.repOK();
    java.lang.String str80 = server0.toString();
    boolean b81 = server0.repOK();
    server0.update();
    java.lang.String str83 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str80.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=200000, exceptions=([100.0.10.1]), bans={}]"+ "'", str83.equals("Server [lastUpdate=200000, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test456"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = null;
    server0.setTime(iTime7);
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server0.removeException(iP19);
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b26 = server0.connect(iP25);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b32 = server0.removeBan(iP31);
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    server33.update();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b46 = server33.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    java.lang.String str54 = server47.toString();
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    boolean b62 = server47.addException(iP60);
    tp2.Server server63 = new tp2.Server();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server63.removeException(iP75);
    boolean b78 = server47.addException(iP75);
    boolean b79 = server33.addBan(iP75);
    tp2.IP iP84 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b85 = server33.connect(iP84);
    boolean b86 = server0.addException(iP84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test457"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server15.repOK();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    server29.update();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    server37.update();
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    boolean b52 = server37.addBan(iP50);
    boolean b53 = server29.addBan(iP50);
    boolean b54 = server15.addException(iP50);
    boolean b55 = server0.addBan(iP50);
    java.lang.String str56 = server0.toString();
    tp2.Server server57 = new tp2.Server();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b70 = server58.addBan(iP69);
    boolean b71 = server57.removeException(iP69);
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b77 = server57.connect(iP76);
    boolean b78 = server0.removeException(iP76);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386353]]}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386353]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test458"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.Server server9 = new tp2.Server();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b15 = server9.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    boolean b35 = server9.addException(iP33);
    boolean b36 = server0.removeException(iP33);
    boolean b37 = server0.repOK();
    java.lang.Integer i41 = null;
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0, i41);
    boolean b43 = server0.addBan(iP42);
    java.lang.String str44 = server0.toString();
    java.lang.String str45 = server0.toString();
    java.lang.String str46 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597326384, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597326384, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=1465597326384, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597386385]]}]"+ "'", str44.equals("Server [lastUpdate=1465597326384, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597386385]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465597326384, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597386385]]}]"+ "'", str45.equals("Server [lastUpdate=1465597326384, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597386385]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=1465597326384, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597386385]]}]"+ "'", str46.equals("Server [lastUpdate=1465597326384, exceptions=(), bans={[IPBan [ip=10.100.0.null, expires=1465597386385]]}]"));

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test459"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    boolean b32 = server0.repOK();
    boolean b33 = server0.repOK();
    server0.update();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b40 = server0.removeBan(iP39);
    boolean b41 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test460"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)1);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test461"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    boolean b71 = server0.repOK();
    java.lang.Integer i74 = null;
    tp2.IP iP76 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, i74, (java.lang.Integer)1);
    boolean b77 = server0.addException(iP76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test462"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    server0.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    java.lang.String str22 = server15.toString();
    tp2.Server server23 = new tp2.Server();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b29 = server23.connect(iP28);
    server23.update();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    boolean b38 = server23.addBan(iP36);
    boolean b39 = server15.addException(iP36);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addBan(iP53);
    server40.update();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    server57.update();
    tp2.Server server65 = new tp2.Server();
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b71 = server65.connect(iP70);
    server65.update();
    tp2.Server server73 = new tp2.Server();
    tp2.IP iP78 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b79 = server73.connect(iP78);
    boolean b80 = server65.addBan(iP78);
    boolean b81 = server57.addBan(iP78);
    boolean b82 = server40.connect(iP78);
    boolean b83 = server15.removeBan(iP78);
    tp2.ITime iTime84 = null;
    server15.setTime(iTime84);
    tp2.StubTime stubTime86 = new tp2.StubTime();
    server15.setTime((tp2.ITime)stubTime86);
    long long88 = stubTime86.getCurrentTime();
    long long89 = stubTime86.getCurrentTime();
    long long90 = stubTime86.getCurrentTime();
    long long91 = stubTime86.getCurrentTime();
    long long92 = stubTime86.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime86);
    tp2.IP iP94 = null;
    boolean b95 = server0.removeException(iP94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long90 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long91 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test463"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    java.lang.String str15 = server8.toString();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addException(iP21);
    tp2.Server server24 = new tp2.Server();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b37 = server25.addBan(iP36);
    boolean b38 = server24.removeException(iP36);
    boolean b39 = server8.addException(iP36);
    boolean b40 = server0.addException(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test464"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    java.lang.Integer i28 = null;
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i28, (java.lang.Integer)10);
    boolean b31 = server7.removeException(iP30);
    boolean b32 = server0.removeException(iP30);
    boolean b33 = server0.repOK();
    java.lang.String str34 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test465"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)10);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test466"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    tp2.IP iP15 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b16 = server10.connect(iP15);
    server10.update();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b23 = server10.addBan(iP22);
    tp2.Server server24 = new tp2.Server();
    tp2.IP iP29 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b30 = server24.connect(iP29);
    java.lang.String str31 = server24.toString();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    boolean b39 = server24.addException(iP37);
    tp2.Server server40 = new tp2.Server();
    tp2.Server server41 = new tp2.Server();
    tp2.IP iP46 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b47 = server41.connect(iP46);
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b53 = server41.addBan(iP52);
    boolean b54 = server40.removeException(iP52);
    boolean b55 = server24.addException(iP52);
    boolean b56 = server10.addBan(iP52);
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server10.connect(iP61);
    java.lang.Integer i65 = null;
    tp2.IP iP67 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i65, (java.lang.Integer)10);
    boolean b68 = server10.addException(iP67);
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server10.connect(iP73);
    boolean b75 = server0.removeBan(iP73);
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b81 = server0.addException(iP80);
    boolean b82 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597326516, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597326516, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465597326516, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465597326516, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test467"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    java.lang.String str10 = server0.toString();
    boolean b11 = server0.repOK();
    boolean b12 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597326546, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597326546, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465597326546, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465597326546, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465597326546, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465597326546, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test468"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    java.lang.String str56 = server49.toString();
    boolean b57 = server49.repOK();
    tp2.Server server58 = new tp2.Server();
    server58.update();
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    tp2.IP iP71 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b72 = server60.addBan(iP71);
    boolean b73 = server58.addBan(iP71);
    boolean b74 = server49.addException(iP71);
    boolean b75 = server0.connect(iP71);
    java.lang.String str76 = server0.toString();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10);
    boolean b82 = server0.connect(iP81);
    java.lang.String str83 = server0.toString();
    java.lang.String str84 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465597326547, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386547]][IPBan [ip=-1.10.1.1, expires=1465597386548]]}]"+ "'", str76.equals("Server [lastUpdate=1465597326547, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386547]][IPBan [ip=-1.10.1.1, expires=1465597386548]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "Server [lastUpdate=1465597326547, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386547]][IPBan [ip=-1.10.1.1, expires=1465597386548]]}]"+ "'", str83.equals("Server [lastUpdate=1465597326547, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386547]][IPBan [ip=-1.10.1.1, expires=1465597386548]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=1465597326547, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386547]][IPBan [ip=-1.10.1.1, expires=1465597386548]]}]"+ "'", str84.equals("Server [lastUpdate=1465597326547, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386547]][IPBan [ip=-1.10.1.1, expires=1465597386548]]}]"));

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test469"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    server0.update();
    java.lang.String str71 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=1465597326583, exceptions=([100.0.10.1]), bans={}]"+ "'", str71.equals("Server [lastUpdate=1465597326583, exceptions=([100.0.10.1]), bans={}]"));

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test470"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    server16.update();
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b29 = server16.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    java.lang.String str37 = server30.toString();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    boolean b45 = server30.addException(iP43);
    tp2.Server server46 = new tp2.Server();
    tp2.Server server47 = new tp2.Server();
    tp2.IP iP52 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b53 = server47.connect(iP52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b59 = server47.addBan(iP58);
    boolean b60 = server46.removeException(iP58);
    boolean b61 = server30.addException(iP58);
    boolean b62 = server16.addBan(iP58);
    tp2.StubTime stubTime63 = new tp2.StubTime();
    server16.setTime((tp2.ITime)stubTime63);
    long long65 = stubTime63.getCurrentTime();
    long long66 = stubTime63.getCurrentTime();
    long long67 = stubTime63.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime63);
    boolean b69 = server0.repOK();
    tp2.StubTime stubTime70 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime70);
    java.lang.String str72 = server0.toString();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)(-1));
    boolean b78 = server0.addException(iP77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long65 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str72.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test471"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)100, (java.lang.Integer)(-1));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test472"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597326667, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386667]]}]"+ "'", str80.equals("Server [lastUpdate=1465597326667, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386667]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597326667, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386667]]}]"+ "'", str81.equals("Server [lastUpdate=1465597326667, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386667]]}]"));

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test473"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b28 = server16.addBan(iP27);
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b34 = server16.removeException(iP33);
    java.lang.Integer i37 = null;
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, i37, (java.lang.Integer)10);
    boolean b40 = server16.removeException(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b46 = server16.removeException(iP45);
    boolean b47 = server0.removeBan(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test474"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    server0.update();
    server0.update();
    tp2.Server server18 = new tp2.Server();
    tp2.IP iP23 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b24 = server18.connect(iP23);
    server18.update();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b31 = server18.addBan(iP30);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server18.addBan(iP60);
    tp2.StubTime stubTime65 = new tp2.StubTime();
    server18.setTime((tp2.ITime)stubTime65);
    server0.setTime((tp2.ITime)stubTime65);
    tp2.Server server68 = new tp2.Server();
    server68.update();
    tp2.Server server70 = new tp2.Server();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b76 = server70.connect(iP75);
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b82 = server70.addBan(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server0.connect(iP81);
    tp2.StubTime stubTime85 = new tp2.StubTime();
    long long86 = stubTime85.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime85);
    java.lang.String str88 = server0.toString();
    boolean b89 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long86 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Server [lastUpdate=1465597326715, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386714]]}]"+ "'", str88.equals("Server [lastUpdate=1465597326715, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597386714]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test475"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)100);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test476"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addBan(iP13);
    boolean b16 = server0.repOK();
    boolean b17 = server0.repOK();
    tp2.Server server18 = new tp2.Server();
    server18.update();
    tp2.Server server20 = new tp2.Server();
    tp2.IP iP25 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b26 = server20.connect(iP25);
    java.lang.String str27 = server20.toString();
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    boolean b35 = server20.addException(iP33);
    tp2.Server server36 = new tp2.Server();
    tp2.Server server37 = new tp2.Server();
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b43 = server37.connect(iP42);
    tp2.IP iP48 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b49 = server37.addBan(iP48);
    boolean b50 = server36.removeException(iP48);
    boolean b51 = server20.addException(iP48);
    boolean b52 = server18.connect(iP48);
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    server53.update();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b66 = server53.addBan(iP65);
    java.lang.String str67 = server53.toString();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.IP iP80 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b81 = server68.addBan(iP80);
    boolean b82 = server53.removeBan(iP80);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)(-1));
    boolean b88 = server53.connect(iP87);
    boolean b89 = server18.removeBan(iP87);
    boolean b90 = server0.addException(iP87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=1465597326792, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386792]]}]"+ "'", str67.equals("Server [lastUpdate=1465597326792, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386792]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test477"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b14 = server0.removeBan(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b20 = server0.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    tp2.ITime iTime28 = null;
    server21.setTime(iTime28);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server21.removeException(iP34);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server21.addException(iP49);
    boolean b53 = server0.addException(iP49);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)10);
    boolean b59 = server0.addException(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597326826, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597326826, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test478"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    java.lang.String str21 = server14.toString();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    boolean b29 = server14.addException(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    boolean b45 = server14.addException(iP42);
    boolean b46 = server0.addBan(iP42);
    tp2.StubTime stubTime47 = new tp2.StubTime();
    server0.setTime((tp2.ITime)stubTime47);
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    tp2.Server server62 = new tp2.Server();
    server62.update();
    tp2.Server server64 = new tp2.Server();
    tp2.IP iP69 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b70 = server64.connect(iP69);
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b76 = server64.addBan(iP75);
    boolean b77 = server62.addBan(iP75);
    boolean b78 = server49.removeException(iP75);
    boolean b79 = server0.addException(iP75);
    java.lang.String str80 = server0.toString();
    java.lang.String str81 = server0.toString();
    server0.update();
    server0.update();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)(-1));
    boolean b89 = server0.addException(iP88);
    boolean b90 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465597326842, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386842]]}]"+ "'", str80.equals("Server [lastUpdate=1465597326842, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386842]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=1465597326842, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386842]]}]"+ "'", str81.equals("Server [lastUpdate=1465597326842, exceptions=([-1.10.1.1]), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386842]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test479"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    server15.update();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b28 = server15.addBan(iP27);
    boolean b29 = server0.removeBan(iP27);
    tp2.Server server30 = new tp2.Server();
    tp2.Server server31 = new tp2.Server();
    tp2.IP iP36 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b37 = server31.connect(iP36);
    tp2.IP iP42 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b43 = server31.addBan(iP42);
    boolean b44 = server30.removeException(iP42);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    server45.update();
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b58 = server45.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    java.lang.String str66 = server59.toString();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    boolean b74 = server59.addException(iP72);
    tp2.Server server75 = new tp2.Server();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    tp2.IP iP87 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b88 = server76.addBan(iP87);
    boolean b89 = server75.removeException(iP87);
    boolean b90 = server59.addException(iP87);
    boolean b91 = server45.addBan(iP87);
    tp2.StubTime stubTime92 = new tp2.StubTime();
    server45.setTime((tp2.ITime)stubTime92);
    server30.setTime((tp2.ITime)stubTime92);
    long long95 = stubTime92.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime92);
    long long97 = stubTime92.getCurrentTime();
    long long98 = stubTime92.getCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465597326878, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386878]]}]"+ "'", str14.equals("Server [lastUpdate=1465597326878, exceptions=(), bans={[IPBan [ip=100.-1.-1.0, expires=1465597386878]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long95 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long97 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long98 == 200000L);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test480"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    java.lang.String str70 = server0.toString();
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b76 = server0.removeBan(iP75);
    boolean b77 = server0.repOK();
    boolean b78 = server0.repOK();
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)1);
    boolean b84 = server0.addBan(iP83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test481"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    server0.update();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)0);
    boolean b21 = server0.removeBan(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test482"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b13 = server0.addBan(iP12);
    boolean b14 = server0.repOK();
    server0.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    java.lang.String str23 = server16.toString();
    boolean b24 = server16.repOK();
    tp2.Server server25 = new tp2.Server();
    server25.update();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    boolean b40 = server25.addBan(iP38);
    boolean b41 = server16.addException(iP38);
    boolean b42 = server0.addBan(iP38);
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b48 = server0.removeBan(iP47);
    boolean b49 = server0.repOK();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)100);
    boolean b55 = server0.addException(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test483"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b20 = server14.connect(iP19);
    server14.update();
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.Server server30 = new tp2.Server();
    tp2.IP iP35 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b36 = server30.connect(iP35);
    boolean b37 = server22.addBan(iP35);
    boolean b38 = server14.addBan(iP35);
    boolean b39 = server0.addException(iP35);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b45 = server0.removeBan(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test484"); }


    tp2.Server server0 = new tp2.Server();
    tp2.Server server1 = new tp2.Server();
    tp2.IP iP6 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b7 = server1.connect(iP6);
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b13 = server1.addBan(iP12);
    boolean b14 = server0.removeException(iP12);
    tp2.Server server15 = new tp2.Server();
    server15.update();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    java.lang.String str24 = server17.toString();
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    boolean b32 = server17.addException(iP30);
    tp2.Server server33 = new tp2.Server();
    tp2.Server server34 = new tp2.Server();
    tp2.IP iP39 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b40 = server34.connect(iP39);
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b46 = server34.addBan(iP45);
    boolean b47 = server33.removeException(iP45);
    boolean b48 = server17.addException(iP45);
    boolean b49 = server15.connect(iP45);
    boolean b50 = server0.connect(iP45);
    tp2.Server server51 = new tp2.Server();
    tp2.IP iP56 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b57 = server51.connect(iP56);
    server51.update();
    tp2.Server server59 = new tp2.Server();
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b65 = server59.connect(iP64);
    server59.update();
    tp2.Server server67 = new tp2.Server();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b73 = server67.connect(iP72);
    boolean b74 = server59.addBan(iP72);
    boolean b75 = server51.addBan(iP72);
    boolean b76 = server0.connect(iP72);
    server0.update();
    java.lang.String str78 = server0.toString();
    boolean b79 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Server [lastUpdate=1465597326989, exceptions=(), bans={}]"+ "'", str78.equals("Server [lastUpdate=1465597326989, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test485"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b19 = server13.connect(iP18);
    tp2.ITime iTime20 = null;
    server13.setTime(iTime20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server13.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    tp2.IP iP33 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b34 = server28.connect(iP33);
    server28.update();
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    server36.update();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addBan(iP49);
    boolean b52 = server28.addBan(iP49);
    boolean b53 = server13.connect(iP49);
    boolean b54 = server0.removeBan(iP49);
    tp2.Server server55 = new tp2.Server();
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b61 = server55.connect(iP60);
    java.lang.String str62 = server55.toString();
    tp2.Server server63 = new tp2.Server();
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b69 = server63.connect(iP68);
    boolean b70 = server55.addException(iP68);
    tp2.Server server71 = new tp2.Server();
    tp2.Server server72 = new tp2.Server();
    tp2.IP iP77 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b78 = server72.connect(iP77);
    tp2.IP iP83 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b84 = server72.addBan(iP83);
    boolean b85 = server71.removeException(iP83);
    boolean b86 = server55.addException(iP83);
    boolean b87 = server0.connect(iP83);
    tp2.IP iP92 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b93 = server0.removeException(iP92);
    tp2.IP iP98 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)10);
    boolean b99 = server0.removeBan(iP98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test486"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    boolean b27 = server0.repOK();
    boolean b28 = server0.repOK();
    boolean b29 = server0.repOK();
    tp2.Server server30 = new tp2.Server();
    server30.update();
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    java.lang.String str39 = server32.toString();
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    boolean b47 = server32.addException(iP45);
    tp2.Server server48 = new tp2.Server();
    tp2.Server server49 = new tp2.Server();
    tp2.IP iP54 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b55 = server49.connect(iP54);
    tp2.IP iP60 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b61 = server49.addBan(iP60);
    boolean b62 = server48.removeException(iP60);
    boolean b63 = server32.addException(iP60);
    boolean b64 = server30.connect(iP60);
    boolean b65 = server0.connect(iP60);
    java.lang.String str66 = server0.toString();
    boolean b67 = server0.repOK();
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1));
    boolean b73 = server0.addBan(iP72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test487"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.IP iP11 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    server13.update();
    tp2.Server server15 = new tp2.Server();
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b21 = server15.connect(iP20);
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b27 = server15.addBan(iP26);
    boolean b28 = server13.addBan(iP26);
    boolean b29 = server0.removeException(iP26);
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)100, (java.lang.Integer)1);
    boolean b35 = server0.addException(iP34);
    boolean b36 = server0.repOK();
    boolean b37 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test488"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    boolean b15 = server0.addException(iP13);
    tp2.Server server16 = new tp2.Server();
    tp2.Server server17 = new tp2.Server();
    tp2.IP iP22 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b23 = server17.connect(iP22);
    tp2.IP iP28 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b29 = server17.addBan(iP28);
    boolean b30 = server16.removeException(iP28);
    boolean b31 = server0.addException(iP28);
    tp2.Server server32 = new tp2.Server();
    tp2.IP iP37 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b38 = server32.connect(iP37);
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b44 = server32.addBan(iP43);
    tp2.Server server45 = new tp2.Server();
    tp2.IP iP50 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b51 = server45.connect(iP50);
    tp2.ITime iTime52 = null;
    server45.setTime(iTime52);
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server45.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    tp2.IP iP65 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b66 = server60.connect(iP65);
    server60.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    server68.update();
    tp2.Server server76 = new tp2.Server();
    tp2.IP iP81 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b82 = server76.connect(iP81);
    boolean b83 = server68.addBan(iP81);
    boolean b84 = server60.addBan(iP81);
    boolean b85 = server45.connect(iP81);
    boolean b86 = server32.removeBan(iP81);
    boolean b87 = server0.addException(iP81);
    boolean b88 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test489"); }


    java.lang.Integer i0 = null;
    tp2.IP iP4 = new tp2.IP(i0, (java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)10);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test490"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)0, (java.lang.Integer)1);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test491"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    tp2.Server server26 = new tp2.Server();
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b32 = server26.connect(iP31);
    server26.update();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b39 = server26.addBan(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    java.lang.String str47 = server40.toString();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    boolean b55 = server40.addException(iP53);
    tp2.Server server56 = new tp2.Server();
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    tp2.IP iP68 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b69 = server57.addBan(iP68);
    boolean b70 = server56.removeException(iP68);
    boolean b71 = server40.addException(iP68);
    boolean b72 = server26.addBan(iP68);
    tp2.StubTime stubTime73 = new tp2.StubTime();
    server26.setTime((tp2.ITime)stubTime73);
    long long75 = stubTime73.getCurrentTime();
    long long76 = stubTime73.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime73);
    java.lang.Integer i81 = null;
    tp2.IP iP82 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)100, i81);
    boolean b83 = server0.removeException(iP82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test492"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    server0.update();
    tp2.IP iP14 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)100);
    boolean b15 = server0.addBan(iP14);
    tp2.IP iP20 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b21 = server0.addException(iP20);
    tp2.Server server22 = new tp2.Server();
    tp2.IP iP27 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b28 = server22.connect(iP27);
    server22.update();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b35 = server22.addBan(iP34);
    tp2.Server server36 = new tp2.Server();
    tp2.IP iP41 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b42 = server36.connect(iP41);
    java.lang.String str43 = server36.toString();
    tp2.Server server44 = new tp2.Server();
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b50 = server44.connect(iP49);
    boolean b51 = server36.addException(iP49);
    tp2.Server server52 = new tp2.Server();
    tp2.Server server53 = new tp2.Server();
    tp2.IP iP58 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b59 = server53.connect(iP58);
    tp2.IP iP64 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b65 = server53.addBan(iP64);
    boolean b66 = server52.removeException(iP64);
    boolean b67 = server36.addException(iP64);
    boolean b68 = server22.addBan(iP64);
    tp2.StubTime stubTime69 = new tp2.StubTime();
    server22.setTime((tp2.ITime)stubTime69);
    long long71 = stubTime69.getCurrentTime();
    long long72 = stubTime69.getCurrentTime();
    long long73 = stubTime69.getCurrentTime();
    long long74 = stubTime69.getCurrentTime();
    long long75 = stubTime69.getCurrentTime();
    long long76 = stubTime69.getCurrentTime();
    long long77 = stubTime69.getCurrentTime();
    long long78 = stubTime69.getCurrentTime();
    long long79 = stubTime69.getCurrentTime();
    server0.setTime((tp2.ITime)stubTime69);
    tp2.IP iP85 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)0, (java.lang.Integer)(-1), (java.lang.Integer)100);
    boolean b86 = server0.removeBan(iP85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long73 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long75 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long77 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long78 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long79 == 200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test493"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    boolean b26 = server0.repOK();
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP32 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b33 = server27.connect(iP32);
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b39 = server27.addBan(iP38);
    tp2.IP iP44 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b45 = server27.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    tp2.IP iP51 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b52 = server46.connect(iP51);
    tp2.IP iP57 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b58 = server46.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    server59.update();
    tp2.Server server61 = new tp2.Server();
    tp2.IP iP66 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b67 = server61.connect(iP66);
    tp2.IP iP72 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b73 = server61.addBan(iP72);
    boolean b74 = server59.addBan(iP72);
    boolean b75 = server46.removeException(iP72);
    boolean b76 = server27.connect(iP72);
    boolean b77 = server0.removeBan(iP72);
    tp2.ITime iTime78 = null;
    server0.setTime(iTime78);
    tp2.IP iP80 = null;
    boolean b81 = server0.removeBan(iP80);
    java.lang.Integer i82 = null;
    tp2.IP iP86 = new tp2.IP(i82, (java.lang.Integer)(-1), (java.lang.Integer)1, (java.lang.Integer)(-1));
    boolean b87 = server0.removeException(iP86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test494"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)1, (java.lang.Integer)10, (java.lang.Integer)(-1), (java.lang.Integer)0);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test495"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addBan(iP21);
    server0.update();
    java.lang.String str26 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465597327295, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597387295]]}]"+ "'", str26.equals("Server [lastUpdate=1465597327295, exceptions=(), bans={[IPBan [ip=100.0.10.1, expires=1465597387295]]}]"));

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test496"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    server0.update();
    java.lang.String str8 = server0.toString();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)1, (java.lang.Integer)(-1), (java.lang.Integer)1);
    boolean b14 = server0.connect(iP13);
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)100, (java.lang.Integer)(-1));
    boolean b20 = server0.removeException(iP19);
    boolean b21 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465597327312, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465597327312, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test497"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    tp2.IP iP13 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b14 = server8.connect(iP13);
    server8.update();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP21 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b22 = server16.connect(iP21);
    boolean b23 = server8.addBan(iP21);
    boolean b24 = server0.addException(iP21);
    tp2.Server server25 = new tp2.Server();
    tp2.IP iP30 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b31 = server25.connect(iP30);
    server25.update();
    tp2.Server server33 = new tp2.Server();
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b39 = server33.connect(iP38);
    boolean b40 = server25.addBan(iP38);
    server25.update();
    tp2.Server server42 = new tp2.Server();
    tp2.IP iP47 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b48 = server42.connect(iP47);
    server42.update();
    tp2.Server server50 = new tp2.Server();
    tp2.IP iP55 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b56 = server50.connect(iP55);
    server50.update();
    tp2.Server server58 = new tp2.Server();
    tp2.IP iP63 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b64 = server58.connect(iP63);
    boolean b65 = server50.addBan(iP63);
    boolean b66 = server42.addBan(iP63);
    boolean b67 = server25.connect(iP63);
    boolean b68 = server0.removeBan(iP63);
    java.lang.String str69 = server0.toString();
    boolean b70 = server0.repOK();
    java.lang.Integer i73 = null;
    tp2.IP iP75 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)100, i73, (java.lang.Integer)1);
    boolean b76 = server0.removeBan(iP75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=([100.0.10.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test498"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    tp2.IP iP18 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b19 = server7.addBan(iP18);
    tp2.IP iP24 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b25 = server7.removeException(iP24);
    boolean b26 = server0.addException(iP24);
    tp2.IP iP31 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)0);
    boolean b32 = server0.connect(iP31);
    java.lang.String str33 = server0.toString();
    java.lang.Integer i36 = null;
    tp2.IP iP38 = new tp2.IP((java.lang.Integer)10, (java.lang.Integer)0, i36, (java.lang.Integer)10);
    boolean b39 = server0.removeException(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.IP iP45 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b46 = server40.connect(iP45);
    server40.update();
    tp2.Server server48 = new tp2.Server();
    tp2.IP iP53 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b54 = server48.connect(iP53);
    server48.update();
    tp2.Server server56 = new tp2.Server();
    tp2.IP iP61 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b62 = server56.connect(iP61);
    boolean b63 = server48.addBan(iP61);
    boolean b64 = server40.addBan(iP61);
    boolean b65 = server0.connect(iP61);
    tp2.IP iP70 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)0, (java.lang.Integer)100, (java.lang.Integer)10);
    boolean b71 = server0.removeException(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=([-1.10.1.1]), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test499"); }


    tp2.IP iP4 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)10, (java.lang.Integer)0, (java.lang.Integer)0);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","tp2Test0.test500"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP5 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    tp2.IP iP12 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b13 = server7.connect(iP12);
    server7.update();
    tp2.IP iP19 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)(-1), (java.lang.Integer)0);
    boolean b20 = server7.addBan(iP19);
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP26 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b27 = server21.connect(iP26);
    java.lang.String str28 = server21.toString();
    tp2.Server server29 = new tp2.Server();
    tp2.IP iP34 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b35 = server29.connect(iP34);
    boolean b36 = server21.addException(iP34);
    tp2.Server server37 = new tp2.Server();
    tp2.Server server38 = new tp2.Server();
    tp2.IP iP43 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b44 = server38.connect(iP43);
    tp2.IP iP49 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b50 = server38.addBan(iP49);
    boolean b51 = server37.removeException(iP49);
    boolean b52 = server21.addException(iP49);
    boolean b53 = server7.addBan(iP49);
    tp2.StubTime stubTime54 = new tp2.StubTime();
    server7.setTime((tp2.ITime)stubTime54);
    server0.setTime((tp2.ITime)stubTime54);
    tp2.Server server57 = new tp2.Server();
    tp2.IP iP62 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b63 = server57.connect(iP62);
    java.lang.String str64 = server57.toString();
    boolean b65 = server57.repOK();
    tp2.Server server66 = new tp2.Server();
    server66.update();
    tp2.Server server68 = new tp2.Server();
    tp2.IP iP73 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)0, (java.lang.Integer)10, (java.lang.Integer)1);
    boolean b74 = server68.connect(iP73);
    tp2.IP iP79 = new tp2.IP((java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b80 = server68.addBan(iP79);
    boolean b81 = server66.addBan(iP79);
    boolean b82 = server57.addException(iP79);
    boolean b83 = server57.repOK();
    tp2.IP iP88 = new tp2.IP((java.lang.Integer)100, (java.lang.Integer)(-1), (java.lang.Integer)10, (java.lang.Integer)0);
    boolean b89 = server57.addException(iP88);
    boolean b90 = server0.addBan(iP88);
    tp2.IP iP95 = new tp2.IP((java.lang.Integer)0, (java.lang.Integer)1, (java.lang.Integer)1, (java.lang.Integer)1);
    boolean b96 = server0.removeException(iP95);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

}
