/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 13 13:56:13 ART 2016
 */

package tp2;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import korat.finitization.impl.Finitization;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Server_ESTest extends Server_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Server server0 = new Server();
      SinglyLinkedList singlyLinkedList0 = server0.exceptions;
      singlyLinkedList0.size = 1;
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      strictlySortedSinglyLinkedList0.size = (-2027);
      server0.update();
  }

  @Test
  public void test02()  throws Throwable  {
      Server server0 = new Server();
      server0.bans = null;
      // Undeclared exception!
      try { 
        server0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.Server", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Server server0 = new Server();
      server0.bans = null;
      // Undeclared exception!
      try { 
        server0.repOK();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.Server", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Server server0 = new Server();
      server0.addBan((IP) null);
      // Undeclared exception!
      try { 
        server0.removeBan((IP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.StrictlySortedSinglyLinkedList", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Server.finServer(1073741824);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Server.finServer(2912);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 20
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      Long long0 = new Long((long) 0);
      IPBan iPBan0 = new IPBan((IP) null, long0);
      strictlySortedSinglyLinkedList0.add(iPBan0);
      // Undeclared exception!
      try { 
        server0.connect((IP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.StrictlySortedSinglyLinkedList", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Server server0 = new Server();
      // Undeclared exception!
      try { 
        server0.addException((IP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.SinglyLinkedList", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Server server0 = new Server();
      server0.addBan((IP) null);
      // Undeclared exception!
      try { 
        server0.addBan((IP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.StrictlySortedSinglyLinkedList", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(111);
      Integer integer1 = new Integer(921);
      IP iP0 = new IP(integer0, integer1, integer0, integer0);
      boolean boolean0 = server0.addException(iP0);
      assertTrue(boolean0);
      
      iP0.setSecond(integer0);
      boolean boolean1 = server0.addBan(iP0);
      boolean boolean2 = server0.repOK();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test
  public void test11()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      strictlySortedSinglyLinkedList0.size = (-2027);
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      Long long0 = new Long((long) 0);
      IPBan iPBan0 = new IPBan((IP) null, long0);
      boolean boolean0 = strictlySortedSinglyLinkedList0.add(iPBan0);
      boolean boolean1 = server0.repOK();
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      strictlySortedSinglyLinkedList0.add((IPBan) null);
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = new StrictlySortedSinglyLinkedList();
      server0.bans = strictlySortedSinglyLinkedList0;
      Node node0 = strictlySortedSinglyLinkedList0.header;
      node0.next = node0;
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Server server0 = new Server();
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.size = (-1262);
      server0.exceptions = singlyLinkedList0;
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(4);
      IP iP0 = new IP((Integer) null, (Integer) null, (Integer) null, integer0);
      boolean boolean0 = server0.addException(iP0);
      boolean boolean1 = server0.repOK();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test17()  throws Throwable  {
      Server server0 = new Server();
      SinglyLinkedList singlyLinkedList0 = server0.exceptions;
      Entry entry0 = singlyLinkedList0.header;
      entry0.next = singlyLinkedList0.header;
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(4);
      IP iP0 = new IP((Integer) null, (Integer) null, (Integer) null, integer0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      server0.exceptions = singlyLinkedList0;
      Entry entry0 = new Entry();
      entry0.element = iP0;
      singlyLinkedList0.header = entry0;
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      IP iP0 = new IP(integer0, integer0, integer0, integer0);
      server0.addBan(iP0);
      server0.update();
  }

  @Test
  public void test20()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      Long long0 = new Long((long) 648);
      IPBan iPBan0 = new IPBan((IP) null, long0);
      strictlySortedSinglyLinkedList0.add(iPBan0);
      // Undeclared exception!
      try { 
        server0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("tp2.StrictlySortedSinglyLinkedList", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Server server0 = new Server();
      server0.update();
      StubTime stubTime0 = new StubTime();
      server0.setTime(stubTime0);
      boolean boolean0 = server0.repOK();
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(152);
      IP iP0 = new IP(integer0, integer0, integer0, integer0);
      boolean boolean0 = server0.removeBan(iP0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      IP iP0 = new IP(integer0, integer0, integer0, integer0);
      boolean boolean0 = server0.addBan(iP0);
      assertTrue(boolean0);
      
      boolean boolean1 = server0.removeBan(iP0);
      assertTrue(boolean1);
  }

  @Test
  public void test24()  throws Throwable  {
      Server server0 = new Server();
      IP iP0 = new IP((Integer) 0, (Integer) null, (Integer) null, (Integer) 0);
      boolean boolean0 = server0.addBan(iP0);
      boolean boolean1 = server0.addBan(iP0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      Server server0 = new Server();
      StrictlySortedSinglyLinkedList strictlySortedSinglyLinkedList0 = server0.bans;
      IP iP0 = new IP((Integer) 0, (Integer) strictlySortedSinglyLinkedList0.size, (Integer) strictlySortedSinglyLinkedList0.size, (Integer) strictlySortedSinglyLinkedList0.size);
      boolean boolean0 = server0.addException(iP0);
      boolean boolean1 = server0.addException(iP0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test26()  throws Throwable  {
      Server server0 = new Server();
      Integer integer0 = new Integer(4);
      IP iP0 = new IP((Integer) null, (Integer) null, (Integer) null, integer0);
      boolean boolean0 = server0.addException(iP0);
      assertTrue(boolean0);
      
      boolean boolean1 = server0.addBan(iP0);
      assertFalse(boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      Server server0 = new Server();
      IP iP0 = new IP((Integer) 0, (Integer) null, (Integer) null, (Integer) 0);
      boolean boolean0 = server0.addBan(iP0);
      assertTrue(boolean0);
      
      boolean boolean1 = server0.connect(iP0);
      assertFalse(boolean1);
  }

  @Test
  public void test28()  throws Throwable  {
      Server server0 = new Server();
      boolean boolean0 = server0.connect((IP) null);
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Server server0 = new Server();
      boolean boolean0 = server0.removeException((IP) null);
      assertFalse(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      Finitization finitization0 = (Finitization)Server.finServer(5);
      assertFalse(finitization0.areArraysHandledAsObjects());
  }

  @Test
  public void test31()  throws Throwable  {
      Server server0 = new Server();
      String string0 = server0.toString();
      assertEquals("Server [lastUpdate=0, exceptions=(), bans={}]", string0);
  }
}
